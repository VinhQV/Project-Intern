
Automatic_Water_Pump.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002268  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080023fc  080023fc  000033fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002418  08002418  00004058  2**0
                  CONTENTS
  4 .ARM          00000000  08002418  08002418  00004058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002418  08002418  00004058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002418  08002418  00003418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800241c  0800241c  0000341c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08002420  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000058  08002478  00004058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08002478  000043a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008646  00000000  00000000  00004088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001adc  00000000  00000000  0000c6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0000e1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f8  00000000  00000000  0000ec78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ed35  00000000  00000000  0000f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089cd  00000000  00000000  0001e1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004c48e  00000000  00000000  00026b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00073000  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e40  00000000  00000000  00073044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00075e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000058 	.word	0x20000058
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080023e4 	.word	0x080023e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000005c 	.word	0x2000005c
 80001d0:	080023e4 	.word	0x080023e4

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b16      	ldr	r3, [pc, #88]	@ (8000234 <SystemInit+0x60>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80001de:	4a15      	ldr	r2, [pc, #84]	@ (8000234 <SystemInit+0x60>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b13      	ldr	r3, [pc, #76]	@ (8000238 <SystemInit+0x64>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	@ (8000238 <SystemInit+0x64>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	@ (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000238 <SystemInit+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000238 <SystemInit+0x64>)
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	@ (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	@ (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b09      	ldr	r3, [pc, #36]	@ (8000238 <SystemInit+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	@ (8000238 <SystemInit+0x64>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000222:	f000 f88f 	bl	8000344 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <SystemInit+0x60>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
#endif
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000240:	b480      	push	{r7}
 8000242:	b087      	sub	sp, #28
 8000244:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	2302      	movs	r3, #2
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
 8000256:	2302      	movs	r3, #2
 8000258:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800025a:	4b35      	ldr	r3, [pc, #212]	@ (8000330 <SystemCoreClockUpdate+0xf0>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	f003 030c 	and.w	r3, r3, #12
 8000262:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b08      	cmp	r3, #8
 8000268:	d011      	beq.n	800028e <SystemCoreClockUpdate+0x4e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b08      	cmp	r3, #8
 800026e:	d844      	bhi.n	80002fa <SystemCoreClockUpdate+0xba>
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d003      	beq.n	800027e <SystemCoreClockUpdate+0x3e>
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	2b04      	cmp	r3, #4
 800027a:	d004      	beq.n	8000286 <SystemCoreClockUpdate+0x46>
 800027c:	e03d      	b.n	80002fa <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800027e:	4b2d      	ldr	r3, [pc, #180]	@ (8000334 <SystemCoreClockUpdate+0xf4>)
 8000280:	4a2d      	ldr	r2, [pc, #180]	@ (8000338 <SystemCoreClockUpdate+0xf8>)
 8000282:	601a      	str	r2, [r3, #0]
      break;
 8000284:	e03d      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000286:	4b2b      	ldr	r3, [pc, #172]	@ (8000334 <SystemCoreClockUpdate+0xf4>)
 8000288:	4a2c      	ldr	r2, [pc, #176]	@ (800033c <SystemCoreClockUpdate+0xfc>)
 800028a:	601a      	str	r2, [r3, #0]
      break;
 800028c:	e039      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800028e:	4b28      	ldr	r3, [pc, #160]	@ (8000330 <SystemCoreClockUpdate+0xf0>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	0d9b      	lsrs	r3, r3, #22
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800029a:	4b25      	ldr	r3, [pc, #148]	@ (8000330 <SystemCoreClockUpdate+0xf0>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80002a2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00c      	beq.n	80002c4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002aa:	4a24      	ldr	r2, [pc, #144]	@ (800033c <SystemCoreClockUpdate+0xfc>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000330 <SystemCoreClockUpdate+0xf0>)
 80002b4:	6852      	ldr	r2, [r2, #4]
 80002b6:	0992      	lsrs	r2, r2, #6
 80002b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002bc:	fb02 f303 	mul.w	r3, r2, r3
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	e00b      	b.n	80002dc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002c4:	4a1c      	ldr	r2, [pc, #112]	@ (8000338 <SystemCoreClockUpdate+0xf8>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002cc:	4a18      	ldr	r2, [pc, #96]	@ (8000330 <SystemCoreClockUpdate+0xf0>)
 80002ce:	6852      	ldr	r2, [r2, #4]
 80002d0:	0992      	lsrs	r2, r2, #6
 80002d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002d6:	fb02 f303 	mul.w	r3, r2, r3
 80002da:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002dc:	4b14      	ldr	r3, [pc, #80]	@ (8000330 <SystemCoreClockUpdate+0xf0>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	f003 0303 	and.w	r3, r3, #3
 80002e6:	3301      	adds	r3, #1
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000334 <SystemCoreClockUpdate+0xf4>)
 80002f6:	6013      	str	r3, [r2, #0]
      break;
 80002f8:	e003      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000334 <SystemCoreClockUpdate+0xf4>)
 80002fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000338 <SystemCoreClockUpdate+0xf8>)
 80002fe:	601a      	str	r2, [r3, #0]
      break;
 8000300:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000302:	4b0b      	ldr	r3, [pc, #44]	@ (8000330 <SystemCoreClockUpdate+0xf0>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	091b      	lsrs	r3, r3, #4
 8000308:	f003 030f 	and.w	r3, r3, #15
 800030c:	4a0c      	ldr	r2, [pc, #48]	@ (8000340 <SystemCoreClockUpdate+0x100>)
 800030e:	5cd3      	ldrb	r3, [r2, r3]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000314:	4b07      	ldr	r3, [pc, #28]	@ (8000334 <SystemCoreClockUpdate+0xf4>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	fa22 f303 	lsr.w	r3, r2, r3
 800031e:	4a05      	ldr	r2, [pc, #20]	@ (8000334 <SystemCoreClockUpdate+0xf4>)
 8000320:	6013      	str	r3, [r2, #0]
}
 8000322:	bf00      	nop
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	20000000 	.word	0x20000000
 8000338:	00f42400 	.word	0x00f42400
 800033c:	017d7840 	.word	0x017d7840
 8000340:	20000004 	.word	0x20000004

08000344 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000348:	4b23      	ldr	r3, [pc, #140]	@ (80003d8 <SetSysClock+0x94>)
 800034a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800034c:	4a22      	ldr	r2, [pc, #136]	@ (80003d8 <SetSysClock+0x94>)
 800034e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000352:	6413      	str	r3, [r2, #64]	@ 0x40
    PWR->CR |= PWR_CR_VOS;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SetSysClock+0x98>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a20      	ldr	r2, [pc, #128]	@ (80003dc <SetSysClock+0x98>)
 800035a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800035e:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000360:	4b1d      	ldr	r3, [pc, #116]	@ (80003d8 <SetSysClock+0x94>)
 8000362:	4a1d      	ldr	r2, [pc, #116]	@ (80003d8 <SetSysClock+0x94>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000368:	4b1b      	ldr	r3, [pc, #108]	@ (80003d8 <SetSysClock+0x94>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	@ (80003d8 <SetSysClock+0x94>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000370:	4b19      	ldr	r3, [pc, #100]	@ (80003d8 <SetSysClock+0x94>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a18      	ldr	r2, [pc, #96]	@ (80003d8 <SetSysClock+0x94>)
 8000376:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800037a:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800037c:	4b16      	ldr	r3, [pc, #88]	@ (80003d8 <SetSysClock+0x94>)
 800037e:	4a18      	ldr	r2, [pc, #96]	@ (80003e0 <SetSysClock+0x9c>)
 8000380:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000382:	4b15      	ldr	r3, [pc, #84]	@ (80003d8 <SetSysClock+0x94>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a14      	ldr	r2, [pc, #80]	@ (80003d8 <SetSysClock+0x94>)
 8000388:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800038c:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800038e:	bf00      	nop
 8000390:	4b11      	ldr	r3, [pc, #68]	@ (80003d8 <SetSysClock+0x94>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f9      	beq.n	8000390 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800039c:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <SetSysClock+0xa0>)
 800039e:	f240 6202 	movw	r2, #1538	@ 0x602
 80003a2:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a4:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <SetSysClock+0x94>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a0b      	ldr	r2, [pc, #44]	@ (80003d8 <SetSysClock+0x94>)
 80003aa:	f023 0303 	bic.w	r3, r3, #3
 80003ae:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003b0:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <SetSysClock+0x94>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4a08      	ldr	r2, [pc, #32]	@ (80003d8 <SetSysClock+0x94>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003bc:	bf00      	nop
 80003be:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <SetSysClock+0x94>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	f003 030c 	and.w	r3, r3, #12
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1f9      	bne.n	80003be <SetSysClock+0x7a>
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40007000 	.word	0x40007000
 80003e0:	08015410 	.word	0x08015410
 80003e4:	40023c00 	.word	0x40023c00

080003e8 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 80003ec:	2101      	movs	r1, #1
 80003ee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80003f2:	f000 fbdb 	bl	8000bac <RCC_APB2PeriphResetCmd>

  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80003f6:	2100      	movs	r1, #0
 80003f8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80003fc:	f000 fbd6 	bl	8000bac <RCC_APB2PeriphResetCmd>
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}

08000404 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign));
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	60fb      	str	r3, [r7, #12]

  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000422:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000426:	60fb      	str	r3, [r7, #12]

  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	791b      	ldrb	r3, [r3, #4]
 800042c:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000432:	4313      	orrs	r3, r2
 8000434:	68fa      	ldr	r2, [r7, #12]
 8000436:	4313      	orrs	r3, r2
 8000438:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	68fa      	ldr	r2, [r7, #12]
 800043e:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	60fb      	str	r3, [r7, #12]

  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000446:	68fa      	ldr	r2, [r7, #12]
 8000448:	4b18      	ldr	r3, [pc, #96]	@ (80004ac <ADC_Init+0xa8>)
 800044a:	4013      	ands	r3, r2
 800044c:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv |
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000456:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv |
 800045c:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	795b      	ldrb	r3, [r3, #5]
 8000462:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000464:	4313      	orrs	r3, r2
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	4313      	orrs	r3, r2
 800046a:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	68fa      	ldr	r2, [r7, #12]
 8000470:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000476:	60fb      	str	r3, [r7, #12]

  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800047e:	60fb      	str	r3, [r7, #12]

  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	7d1b      	ldrb	r3, [r3, #20]
 8000484:	3b01      	subs	r3, #1
 8000486:	b2da      	uxtb	r2, r3
 8000488:	7afb      	ldrb	r3, [r7, #11]
 800048a:	4313      	orrs	r3, r2
 800048c:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800048e:	7afb      	ldrb	r3, [r7, #11]
 8000490:	051b      	lsls	r3, r3, #20
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	4313      	orrs	r3, r2
 8000496:	60fb      	str	r3, [r7, #12]

  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	68fa      	ldr	r2, [r7, #12]
 800049c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800049e:	bf00      	nop
 80004a0:	3714      	adds	r7, #20
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	c0fff7fd 	.word	0xc0fff7fd

080004b0 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80004bc:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <ADC_CommonInit+0x48>)
 80004be:	685b      	ldr	r3, [r3, #4]
 80004c0:	60fb      	str	r3, [r7, #12]

  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	4b0d      	ldr	r3, [pc, #52]	@ (80004fc <ADC_CommonInit+0x4c>)
 80004c6:	4013      	ands	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler |
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 80004d2:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode |
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler |
 80004d8:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode |
 80004de:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode |
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	60fb      	str	r3, [r7, #12]

  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80004e6:	4a04      	ldr	r2, [pc, #16]	@ (80004f8 <ADC_CommonInit+0x48>)
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	6053      	str	r3, [r2, #4]
}
 80004ec:	bf00      	nop
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	40012300 	.word	0x40012300
 80004fc:	fffc30e0 	.word	0xfffc30e0

08000500 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800050c:	78fb      	ldrb	r3, [r7, #3]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d006      	beq.n	8000520 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	f043 0201 	orr.w	r2, r3, #1
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 800051e:	e005      	b.n	800052c <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	f023 0201 	bic.w	r2, r3, #1
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	609a      	str	r2, [r3, #8]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	4608      	mov	r0, r1
 8000542:	4611      	mov	r1, r2
 8000544:	461a      	mov	r2, r3
 8000546:	4603      	mov	r3, r0
 8000548:	70fb      	strb	r3, [r7, #3]
 800054a:	460b      	mov	r3, r1
 800054c:	70bb      	strb	r3, [r7, #2]
 800054e:	4613      	mov	r3, r2
 8000550:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800055a:	78fb      	ldrb	r3, [r7, #3]
 800055c:	2b09      	cmp	r3, #9
 800055e:	d923      	bls.n	80005a8 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000566:	78fb      	ldrb	r3, [r7, #3]
 8000568:	f1a3 020a 	sub.w	r2, r3, #10
 800056c:	4613      	mov	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	4413      	add	r3, r2
 8000572:	2207      	movs	r2, #7
 8000574:	fa02 f303 	lsl.w	r3, r2, r3
 8000578:	60bb      	str	r3, [r7, #8]

    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	43db      	mvns	r3, r3
 800057e:	68fa      	ldr	r2, [r7, #12]
 8000580:	4013      	ands	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000584:	7879      	ldrb	r1, [r7, #1]
 8000586:	78fb      	ldrb	r3, [r7, #3]
 8000588:	f1a3 020a 	sub.w	r2, r3, #10
 800058c:	4613      	mov	r3, r2
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	4413      	add	r3, r2
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	60bb      	str	r3, [r7, #8]

    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	4313      	orrs	r3, r2
 800059e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	e01e      	b.n	80005e6 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	691b      	ldr	r3, [r3, #16]
 80005ac:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80005ae:	78fa      	ldrb	r2, [r7, #3]
 80005b0:	4613      	mov	r3, r2
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	4413      	add	r3, r2
 80005b6:	2207      	movs	r2, #7
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	60bb      	str	r3, [r7, #8]

    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	43db      	mvns	r3, r3
 80005c2:	68fa      	ldr	r2, [r7, #12]
 80005c4:	4013      	ands	r3, r2
 80005c6:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80005c8:	7879      	ldrb	r1, [r7, #1]
 80005ca:	78fa      	ldrb	r2, [r7, #3]
 80005cc:	4613      	mov	r3, r2
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	4413      	add	r3, r2
 80005d2:	fa01 f303 	lsl.w	r3, r1, r3
 80005d6:	60bb      	str	r3, [r7, #8]

    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	4313      	orrs	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80005e6:	78bb      	ldrb	r3, [r7, #2]
 80005e8:	2b06      	cmp	r3, #6
 80005ea:	d821      	bhi.n	8000630 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005f0:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80005f2:	78bb      	ldrb	r3, [r7, #2]
 80005f4:	1e5a      	subs	r2, r3, #1
 80005f6:	4613      	mov	r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	4413      	add	r3, r2
 80005fc:	221f      	movs	r2, #31
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	60bb      	str	r3, [r7, #8]

    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	43db      	mvns	r3, r3
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	4013      	ands	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]

    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800060e:	78f9      	ldrb	r1, [r7, #3]
 8000610:	78bb      	ldrb	r3, [r7, #2]
 8000612:	1e5a      	subs	r2, r3, #1
 8000614:	4613      	mov	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	4413      	add	r3, r2
 800061a:	fa01 f303 	lsl.w	r3, r1, r3
 800061e:	60bb      	str	r3, [r7, #8]

    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	4313      	orrs	r3, r2
 8000626:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	635a      	str	r2, [r3, #52]	@ 0x34
    tmpreg1 |= tmpreg2;

    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800062e:	e047      	b.n	80006c0 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8000630:	78bb      	ldrb	r3, [r7, #2]
 8000632:	2b0c      	cmp	r3, #12
 8000634:	d821      	bhi.n	800067a <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 800063c:	78bb      	ldrb	r3, [r7, #2]
 800063e:	1fda      	subs	r2, r3, #7
 8000640:	4613      	mov	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	4413      	add	r3, r2
 8000646:	221f      	movs	r2, #31
 8000648:	fa02 f303 	lsl.w	r3, r2, r3
 800064c:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	43db      	mvns	r3, r3
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	4013      	ands	r3, r2
 8000656:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000658:	78f9      	ldrb	r1, [r7, #3]
 800065a:	78bb      	ldrb	r3, [r7, #2]
 800065c:	1fda      	subs	r2, r3, #7
 800065e:	4613      	mov	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	4413      	add	r3, r2
 8000664:	fa01 f303 	lsl.w	r3, r1, r3
 8000668:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4313      	orrs	r3, r2
 8000670:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000678:	e022      	b.n	80006c0 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800067e:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000680:	78bb      	ldrb	r3, [r7, #2]
 8000682:	f1a3 020d 	sub.w	r2, r3, #13
 8000686:	4613      	mov	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4413      	add	r3, r2
 800068c:	221f      	movs	r2, #31
 800068e:	fa02 f303 	lsl.w	r3, r2, r3
 8000692:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	43db      	mvns	r3, r3
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	4013      	ands	r3, r2
 800069c:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 800069e:	78f9      	ldrb	r1, [r7, #3]
 80006a0:	78bb      	ldrb	r3, [r7, #2]
 80006a2:	f1a3 020d 	sub.w	r2, r3, #13
 80006a6:	4613      	mov	r3, r2
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	4413      	add	r3, r2
 80006ac:	fa01 f303 	lsl.w	r3, r1, r3
 80006b0:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	68fa      	ldr	r2, [r7, #12]
 80006be:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	609a      	str	r2, [r3, #8]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f8:	b29b      	uxth	r3, r3
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8000706:	b480      	push	{r7}
 8000708:	b085      	sub	sp, #20
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
 800070e:	460b      	mov	r3, r1
 8000710:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8000712:	2300      	movs	r3, #0
 8000714:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	78fb      	ldrb	r3, [r7, #3]
 800071c:	4013      	ands	r3, r2
 800071e:	2b00      	cmp	r3, #0
 8000720:	d002      	beq.n	8000728 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000722:	2301      	movs	r3, #1
 8000724:	73fb      	strb	r3, [r7, #15]
 8000726:	e001      	b.n	800072c <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000728:	2300      	movs	r3, #0
 800072a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 800072c:	7bfb      	ldrb	r3, [r7, #15]
}
 800072e:	4618      	mov	r0, r3
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800073a:	b480      	push	{r7}
 800073c:	b087      	sub	sp, #28
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
 8000742:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	e076      	b.n	8000844 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000756:	2201      	movs	r2, #1
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	693a      	ldr	r2, [r7, #16]
 8000766:	4013      	ands	r3, r2
 8000768:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	429a      	cmp	r2, r3
 8000770:	d165      	bne.n	800083e <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	2103      	movs	r1, #3
 800077c:	fa01 f303 	lsl.w	r3, r1, r3
 8000780:	43db      	mvns	r3, r3
 8000782:	401a      	ands	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	4619      	mov	r1, r3
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	fa01 f303 	lsl.w	r3, r1, r3
 800079a:	431a      	orrs	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d003      	beq.n	80007b0 <GPIO_Init+0x76>
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	d12e      	bne.n	800080e <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	689a      	ldr	r2, [r3, #8]
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	2103      	movs	r1, #3
 80007ba:	fa01 f303 	lsl.w	r3, r1, r3
 80007be:	43db      	mvns	r3, r3
 80007c0:	401a      	ands	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	689a      	ldr	r2, [r3, #8]
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	795b      	ldrb	r3, [r3, #5]
 80007ce:	4619      	mov	r1, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	fa01 f303 	lsl.w	r3, r1, r3
 80007d8:	431a      	orrs	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	685a      	ldr	r2, [r3, #4]
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	4619      	mov	r1, r3
 80007e8:	2301      	movs	r3, #1
 80007ea:	408b      	lsls	r3, r1
 80007ec:	43db      	mvns	r3, r3
 80007ee:	401a      	ands	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	683a      	ldr	r2, [r7, #0]
 80007fa:	7992      	ldrb	r2, [r2, #6]
 80007fc:	4611      	mov	r1, r2
 80007fe:	697a      	ldr	r2, [r7, #20]
 8000800:	b292      	uxth	r2, r2
 8000802:	fa01 f202 	lsl.w	r2, r1, r2
 8000806:	b292      	uxth	r2, r2
 8000808:	431a      	orrs	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	68da      	ldr	r2, [r3, #12]
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	b29b      	uxth	r3, r3
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	2103      	movs	r1, #3
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43db      	mvns	r3, r3
 8000820:	401a      	ands	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	68da      	ldr	r2, [r3, #12]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	79db      	ldrb	r3, [r3, #7]
 800082e:	4619      	mov	r1, r3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	fa01 f303 	lsl.w	r3, r1, r3
 8000838:	431a      	orrs	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	3301      	adds	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	2b0f      	cmp	r3, #15
 8000848:	d985      	bls.n	8000756 <GPIO_Init+0x1c>
    }
  }
}
 800084a:	bf00      	nop
 800084c:	bf00      	nop
 800084e:	371c      	adds	r7, #28
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000864:	2300      	movs	r3, #0
 8000866:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	691a      	ldr	r2, [r3, #16]
 800086c:	887b      	ldrh	r3, [r7, #2]
 800086e:	4013      	ands	r3, r2
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000874:	2301      	movs	r3, #1
 8000876:	73fb      	strb	r3, [r7, #15]
 8000878:	e001      	b.n	800087e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800087a:	2300      	movs	r3, #0
 800087c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800087e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	695a      	ldr	r2, [r3, #20]
 80008a0:	887b      	ldrh	r3, [r7, #2]
 80008a2:	4013      	ands	r3, r2
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d002      	beq.n	80008ae <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80008a8:	2301      	movs	r3, #1
 80008aa:	73fb      	strb	r3, [r7, #15]
 80008ac:	e001      	b.n	80008b2 <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	887a      	ldrh	r2, [r7, #2]
 80008d0:	831a      	strh	r2, [r3, #24]
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	460b      	mov	r3, r1
 80008e8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	887a      	ldrh	r2, [r7, #2]
 80008ee:	835a      	strh	r2, [r3, #26]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	460b      	mov	r3, r1
 8000906:	807b      	strh	r3, [r7, #2]
 8000908:	4613      	mov	r3, r2
 800090a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000914:	787a      	ldrb	r2, [r7, #1]
 8000916:	887b      	ldrh	r3, [r7, #2]
 8000918:	f003 0307 	and.w	r3, r3, #7
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000924:	887b      	ldrh	r3, [r7, #2]
 8000926:	08db      	lsrs	r3, r3, #3
 8000928:	b29b      	uxth	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3208      	adds	r2, #8
 8000930:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000934:	887b      	ldrh	r3, [r7, #2]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	210f      	movs	r1, #15
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	8879      	ldrh	r1, [r7, #2]
 8000946:	08c9      	lsrs	r1, r1, #3
 8000948:	b289      	uxth	r1, r1
 800094a:	4608      	mov	r0, r1
 800094c:	ea02 0103 	and.w	r1, r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f100 0208 	add.w	r2, r0, #8
 8000956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800095a:	887b      	ldrh	r3, [r7, #2]
 800095c:	08db      	lsrs	r3, r3, #3
 800095e:	b29b      	uxth	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3208      	adds	r2, #8
 8000966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	4313      	orrs	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000970:	887b      	ldrh	r3, [r7, #2]
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	b29b      	uxth	r3, r3
 8000976:	461a      	mov	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3208      	adds	r2, #8
 800097c:	68b9      	ldr	r1, [r7, #8]
 800097e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000990:	b480      	push	{r7}
 8000992:	b089      	sub	sp, #36	@ 0x24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000998:	2300      	movs	r3, #0
 800099a:	61bb      	str	r3, [r7, #24]
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
 80009a4:	2302      	movs	r3, #2
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	2302      	movs	r3, #2
 80009ae:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80009b0:	4b4a      	ldr	r3, [pc, #296]	@ (8000adc <RCC_GetClocksFreq+0x14c>)
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f003 030c 	and.w	r3, r3, #12
 80009b8:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	2b08      	cmp	r3, #8
 80009be:	d011      	beq.n	80009e4 <RCC_GetClocksFreq+0x54>
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	2b08      	cmp	r3, #8
 80009c4:	d844      	bhi.n	8000a50 <RCC_GetClocksFreq+0xc0>
 80009c6:	69bb      	ldr	r3, [r7, #24]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d003      	beq.n	80009d4 <RCC_GetClocksFreq+0x44>
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d004      	beq.n	80009dc <RCC_GetClocksFreq+0x4c>
 80009d2:	e03d      	b.n	8000a50 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a42      	ldr	r2, [pc, #264]	@ (8000ae0 <RCC_GetClocksFreq+0x150>)
 80009d8:	601a      	str	r2, [r3, #0]
    break;
 80009da:	e03d      	b.n	8000a58 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a41      	ldr	r2, [pc, #260]	@ (8000ae4 <RCC_GetClocksFreq+0x154>)
 80009e0:	601a      	str	r2, [r3, #0]
    break;
 80009e2:	e039      	b.n	8000a58 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80009e4:	4b3d      	ldr	r3, [pc, #244]	@ (8000adc <RCC_GetClocksFreq+0x14c>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	0d9b      	lsrs	r3, r3, #22
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009f0:	4b3a      	ldr	r3, [pc, #232]	@ (8000adc <RCC_GetClocksFreq+0x14c>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80009f8:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00c      	beq.n	8000a1a <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a00:	4a38      	ldr	r2, [pc, #224]	@ (8000ae4 <RCC_GetClocksFreq+0x154>)
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a08:	4a34      	ldr	r2, [pc, #208]	@ (8000adc <RCC_GetClocksFreq+0x14c>)
 8000a0a:	6852      	ldr	r2, [r2, #4]
 8000a0c:	0992      	lsrs	r2, r2, #6
 8000a0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a12:	fb02 f303 	mul.w	r3, r2, r3
 8000a16:	61fb      	str	r3, [r7, #28]
 8000a18:	e00b      	b.n	8000a32 <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a1a:	4a31      	ldr	r2, [pc, #196]	@ (8000ae0 <RCC_GetClocksFreq+0x150>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a22:	4a2e      	ldr	r2, [pc, #184]	@ (8000adc <RCC_GetClocksFreq+0x14c>)
 8000a24:	6852      	ldr	r2, [r2, #4]
 8000a26:	0992      	lsrs	r2, r2, #6
 8000a28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a2c:	fb02 f303 	mul.w	r3, r2, r3
 8000a30:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000a32:	4b2a      	ldr	r3, [pc, #168]	@ (8000adc <RCC_GetClocksFreq+0x14c>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	f003 0303 	and.w	r3, r3, #3
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000a42:	69fa      	ldr	r2, [r7, #28]
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	601a      	str	r2, [r3, #0]
    break;
 8000a4e:	e003      	b.n	8000a58 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a23      	ldr	r2, [pc, #140]	@ (8000ae0 <RCC_GetClocksFreq+0x150>)
 8000a54:	601a      	str	r2, [r3, #0]
    break;
 8000a56:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000a58:	4b20      	ldr	r3, [pc, #128]	@ (8000adc <RCC_GetClocksFreq+0x14c>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000a60:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	091b      	lsrs	r3, r3, #4
 8000a66:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a68:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae8 <RCC_GetClocksFreq+0x158>)
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	40da      	lsrs	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000a80:	4b16      	ldr	r3, [pc, #88]	@ (8000adc <RCC_GetClocksFreq+0x14c>)
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8000a88:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	0a9b      	lsrs	r3, r3, #10
 8000a8e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a90:	4a15      	ldr	r2, [pc, #84]	@ (8000ae8 <RCC_GetClocksFreq+0x158>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	4413      	add	r3, r2
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685a      	ldr	r2, [r3, #4]
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	40da      	lsrs	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <RCC_GetClocksFreq+0x14c>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8000ab0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	0b5b      	lsrs	r3, r3, #13
 8000ab6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ae8 <RCC_GetClocksFreq+0x158>)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	4413      	add	r3, r2
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	40da      	lsrs	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	60da      	str	r2, [r3, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3724      	adds	r7, #36	@ 0x24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	00f42400 	.word	0x00f42400
 8000ae4:	017d7840 	.word	0x017d7840
 8000ae8:	20000014 	.word	0x20000014

08000aec <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000af8:	78fb      	ldrb	r3, [r7, #3]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d006      	beq.n	8000b0c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000afe:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b02:	4909      	ldr	r1, [pc, #36]	@ (8000b28 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	630b      	str	r3, [r1, #48]	@ 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000b0a:	e006      	b.n	8000b1a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	43db      	mvns	r3, r3
 8000b14:	4904      	ldr	r1, [pc, #16]	@ (8000b28 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b16:	4013      	ands	r3, r2
 8000b18:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b38:	78fb      	ldrb	r3, [r7, #3]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d006      	beq.n	8000b4c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b42:	4909      	ldr	r1, [pc, #36]	@ (8000b68 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	640b      	str	r3, [r1, #64]	@ 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000b4a:	e006      	b.n	8000b5a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	4904      	ldr	r1, [pc, #16]	@ (8000b68 <RCC_APB1PeriphClockCmd+0x3c>)
 8000b56:	4013      	ands	r3, r2
 8000b58:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d006      	beq.n	8000b8c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000b80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b82:	4909      	ldr	r1, [pc, #36]	@ (8000ba8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	644b      	str	r3, [r1, #68]	@ 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000b8a:	e006      	b.n	8000b9a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000b8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	43db      	mvns	r3, r3
 8000b94:	4904      	ldr	r1, [pc, #16]	@ (8000ba8 <RCC_APB2PeriphClockCmd+0x3c>)
 8000b96:	4013      	ands	r3, r2
 8000b98:	644b      	str	r3, [r1, #68]	@ 0x44
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d006      	beq.n	8000bcc <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <RCC_APB2PeriphResetCmd+0x3c>)
 8000bc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bc2:	4909      	ldr	r1, [pc, #36]	@ (8000be8 <RCC_APB2PeriphResetCmd+0x3c>)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	624b      	str	r3, [r1, #36]	@ 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000bca:	e006      	b.n	8000bda <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <RCC_APB2PeriphResetCmd+0x3c>)
 8000bce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	4904      	ldr	r1, [pc, #16]	@ (8000be8 <RCC_APB2PeriphResetCmd+0x3c>)
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800

08000bec <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a29      	ldr	r2, [pc, #164]	@ (8000ca8 <TIM_TimeBaseInit+0xbc>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d013      	beq.n	8000c30 <TIM_TimeBaseInit+0x44>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a28      	ldr	r2, [pc, #160]	@ (8000cac <TIM_TimeBaseInit+0xc0>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d00f      	beq.n	8000c30 <TIM_TimeBaseInit+0x44>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c16:	d00b      	beq.n	8000c30 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a25      	ldr	r2, [pc, #148]	@ (8000cb0 <TIM_TimeBaseInit+0xc4>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d007      	beq.n	8000c30 <TIM_TimeBaseInit+0x44>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a24      	ldr	r2, [pc, #144]	@ (8000cb4 <TIM_TimeBaseInit+0xc8>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d003      	beq.n	8000c30 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a23      	ldr	r2, [pc, #140]	@ (8000cb8 <TIM_TimeBaseInit+0xcc>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d108      	bne.n	8000c42 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000c30:	89fb      	ldrh	r3, [r7, #14]
 8000c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000c36:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	885a      	ldrh	r2, [r3, #2]
 8000c3c:	89fb      	ldrh	r3, [r7, #14]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	81fb      	strh	r3, [r7, #14]
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a1d      	ldr	r2, [pc, #116]	@ (8000cbc <TIM_TimeBaseInit+0xd0>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d00c      	beq.n	8000c64 <TIM_TimeBaseInit+0x78>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000cc0 <TIM_TimeBaseInit+0xd4>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d008      	beq.n	8000c64 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000c52:	89fb      	ldrh	r3, [r7, #14]
 8000c54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000c58:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	891a      	ldrh	r2, [r3, #8]
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	89fa      	ldrh	r2, [r7, #14]
 8000c68:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	881a      	ldrh	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	851a      	strh	r2, [r3, #40]	@ 0x28

  if ((TIMx == TIM1) || (TIMx == TIM8))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <TIM_TimeBaseInit+0xbc>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d003      	beq.n	8000c8a <TIM_TimeBaseInit+0x9e>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a09      	ldr	r2, [pc, #36]	@ (8000cac <TIM_TimeBaseInit+0xc0>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d104      	bne.n	8000c94 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	7a9b      	ldrb	r3, [r3, #10]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2201      	movs	r2, #1
 8000c98:	829a      	strh	r2, [r3, #20]
}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40010000 	.word	0x40010000
 8000cac:	40010400 	.word	0x40010400
 8000cb0:	40000400 	.word	0x40000400
 8000cb4:	40000800 	.word	0x40000800
 8000cb8:	40000c00 	.word	0x40000c00
 8000cbc:	40001000 	.word	0x40001000
 8000cc0:	40001400 	.word	0x40001400

08000cc4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d008      	beq.n	8000ce8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000ce6:	e007      	b.n	8000cf8 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	f023 0301 	bic.w	r3, r3, #1
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	801a      	strh	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	@ 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	8a1b      	ldrh	r3, [r3, #16]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d28:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	88db      	ldrh	r3, [r3, #6]
 8000d32:	461a      	mov	r2, r3
 8000d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d36:	4313      	orrs	r3, r2
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	899b      	ldrh	r3, [r3, #12]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4c:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8000d50:	f023 030c 	bic.w	r3, r3, #12
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	889a      	ldrh	r2, [r3, #4]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	891b      	ldrh	r3, [r3, #8]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000d66:	4313      	orrs	r3, r2
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	8a9b      	ldrh	r3, [r3, #20]
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	899b      	ldrh	r3, [r3, #12]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d92:	4313      	orrs	r3, r2
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fdf4 	bl	8000990 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a30      	ldr	r2, [pc, #192]	@ (8000e6c <USART_Init+0x168>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d003      	beq.n	8000db8 <USART_Init+0xb4>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4a2f      	ldr	r2, [pc, #188]	@ (8000e70 <USART_Init+0x16c>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d102      	bne.n	8000dbe <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	623b      	str	r3, [r7, #32]
 8000dbc:	e001      	b.n	8000dc2 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	899b      	ldrh	r3, [r3, #12]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	da0c      	bge.n	8000de8 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000dce:	6a3a      	ldr	r2, [r7, #32]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	009a      	lsls	r2, r3, #2
 8000dd8:	441a      	add	r2, r3
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	e00b      	b.n	8000e00 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000de8:	6a3a      	ldr	r2, [r7, #32]
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	009a      	lsls	r2, r3, #2
 8000df2:	441a      	add	r2, r3
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfe:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	4a1c      	ldr	r2, [pc, #112]	@ (8000e74 <USART_Init+0x170>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	095b      	lsrs	r3, r3, #5
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	2264      	movs	r2, #100	@ 0x64
 8000e14:	fb02 f303 	mul.w	r3, r2, r3
 8000e18:	69fa      	ldr	r2, [r7, #28]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	899b      	ldrh	r3, [r3, #12]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	da0c      	bge.n	8000e44 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	3332      	adds	r3, #50	@ 0x32
 8000e30:	4a10      	ldr	r2, [pc, #64]	@ (8000e74 <USART_Init+0x170>)
 8000e32:	fba2 2303 	umull	r2, r3, r2, r3
 8000e36:	095b      	lsrs	r3, r3, #5
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e42:	e00b      	b.n	8000e5c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	011b      	lsls	r3, r3, #4
 8000e48:	3332      	adds	r3, #50	@ 0x32
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <USART_Init+0x170>)
 8000e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e50:	095b      	lsrs	r3, r3, #5
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	811a      	strh	r2, [r3, #8]
}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	@ 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40011000 	.word	0x40011000
 8000e70:	40011400 	.word	0x40011400
 8000e74:	51eb851f 	.word	0x51eb851f

08000e78 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d008      	beq.n	8000e9c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	899b      	ldrh	r3, [r3, #12]
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000e9a:	e007      	b.n	8000eac <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	899b      	ldrh	r3, [r3, #12]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	819a      	strh	r2, [r3, #12]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000ec4:	887b      	ldrh	r3, [r7, #2]
 8000ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	809a      	strh	r2, [r3, #4]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	889b      	ldrh	r3, [r3, #4]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000eee:	b29b      	uxth	r3, r3
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	4013      	ands	r3, r2
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d002      	beq.n	8000f22 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
 8000f20:	e001      	b.n	8000f26 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000f22:	2300      	movs	r3, #0
 8000f24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	095b      	lsrs	r3, r3, #5
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000f5a:	887b      	ldrh	r3, [r7, #2]
 8000f5c:	f003 031f 	and.w	r3, r3, #31
 8000f60:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000f62:	2201      	movs	r2, #1
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d107      	bne.n	8000f82 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	899b      	ldrh	r3, [r3, #12]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e011      	b.n	8000fa6 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d107      	bne.n	8000f98 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	8a1b      	ldrh	r3, [r3, #16]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	461a      	mov	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	4013      	ands	r3, r2
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	e006      	b.n	8000fa6 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	8a9b      	ldrh	r3, [r3, #20]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000fae:	2201      	movs	r2, #1
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d005      	beq.n	8000fd8 <USART_GetITStatus+0xa4>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d002      	beq.n	8000fd8 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	74fb      	strb	r3, [r7, #19]
 8000fd6:	e001      	b.n	8000fdc <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000fdc:	7cfb      	ldrb	r3, [r7, #19]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	371c      	adds	r7, #28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b085      	sub	sp, #20
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	81fb      	strh	r3, [r7, #14]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000ffe:	887b      	ldrh	r3, [r7, #2]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001004:	89fb      	ldrh	r3, [r7, #14]
 8001006:	2201      	movs	r2, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 800100e:	89bb      	ldrh	r3, [r7, #12]
 8001010:	43db      	mvns	r3, r3
 8001012:	b29a      	uxth	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	801a      	strh	r2, [r3, #0]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <Button_Init>:
 * @brief  Initialize module button
 * @param  None
 * @retval None
 */
void
Button_Init(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af02      	add	r7, sp, #8
    // Initialize gpio
	BTNGPIO_Init();
 800102a:	f000 f9b1 	bl	8001390 <BTNGPIO_Init>

    for (uint8_t i = 0; i < BUTTON_MAX; i++) {
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	e036      	b.n	80010a2 <Button_Init+0x7e>
		kpad[i].index = i;
 8001034:	79fa      	ldrb	r2, [r7, #7]
 8001036:	4924      	ldr	r1, [pc, #144]	@ (80010c8 <Button_Init+0xa4>)
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	330a      	adds	r3, #10
 8001044:	79fa      	ldrb	r2, [r7, #7]
 8001046:	701a      	strb	r2, [r3, #0]
		kpad[i].scanBtnFunc = ButtonScanTypeEdge;
 8001048:	79fa      	ldrb	r2, [r7, #7]
 800104a:	491f      	ldr	r1, [pc, #124]	@ (80010c8 <Button_Init+0xa4>)
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	3310      	adds	r3, #16
 8001058:	4a1c      	ldr	r2, [pc, #112]	@ (80010cc <Button_Init+0xa8>)
 800105a:	601a      	str	r2, [r3, #0]
		if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4a1c      	ldr	r2, [pc, #112]	@ (80010d0 <Button_Init+0xac>)
 8001060:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	491a      	ldr	r1, [pc, #104]	@ (80010d0 <Button_Init+0xac>)
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	889b      	ldrh	r3, [r3, #4]
 800106e:	4619      	mov	r1, r3
 8001070:	4610      	mov	r0, r2
 8001072:	f7ff fbf1 	bl	8000858 <GPIO_ReadInputDataBit>
 8001076:	4603      	mov	r3, r0
 8001078:	4619      	mov	r1, r3
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4a14      	ldr	r2, [pc, #80]	@ (80010d0 <Button_Init+0xac>)
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4413      	add	r3, r2
 8001082:	799b      	ldrb	r3, [r3, #6]
 8001084:	4299      	cmp	r1, r3
 8001086:	d109      	bne.n	800109c <Button_Init+0x78>
			kpad[i].sold = PIN_ACTIVE;
 8001088:	79fa      	ldrb	r2, [r7, #7]
 800108a:	490f      	ldr	r1, [pc, #60]	@ (80010c8 <Button_Init+0xa4>)
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	3309      	adds	r3, #9
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < BUTTON_MAX; i++) {
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	3301      	adds	r3, #1
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	d9c5      	bls.n	8001034 <Button_Init+0x10>
		}
	}

    idTaskScanButton = TimerStart("", KEY_TIME_SCAN, TIMER_REPEAT_FOREVER, ButtonScan, NULL);
 80010a8:	2300      	movs	r3, #0
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <Button_Init+0xb0>)
 80010ae:	22ff      	movs	r2, #255	@ 0xff
 80010b0:	2105      	movs	r1, #5
 80010b2:	4809      	ldr	r0, [pc, #36]	@ (80010d8 <Button_Init+0xb4>)
 80010b4:	f000 fb22 	bl	80016fc <TimerStart>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <Button_Init+0xb8>)
 80010be:	701a      	strb	r2, [r3, #0]
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000074 	.word	0x20000074
 80010cc:	08001145 	.word	0x08001145
 80010d0:	20000024 	.word	0x20000024
 80010d4:	08001345 	.word	0x08001345
 80010d8:	080023fc 	.word	0x080023fc
 80010dc:	20000054 	.word	0x20000054

080010e0 <Button_SetMode>:
 */
void
Button_SetMode(
    uint8_t id,
    uint8_t mode
) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
    if (id >= BUTTON_MAX) return;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b05      	cmp	r3, #5
 80010f4:	d80a      	bhi.n	800110c <Button_SetMode+0x2c>
    kpad[id].mode = mode;
 80010f6:	79fa      	ldrb	r2, [r7, #7]
 80010f8:	4907      	ldr	r1, [pc, #28]	@ (8001118 <Button_SetMode+0x38>)
 80010fa:	4613      	mov	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	330b      	adds	r3, #11
 8001106:	79ba      	ldrb	r2, [r7, #6]
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	e000      	b.n	800110e <Button_SetMode+0x2e>
    if (id >= BUTTON_MAX) return;
 800110c:	bf00      	nop
}
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	20000074 	.word	0x20000074

0800111c <Button_RegisterEventCallback>:
 */
void
Button_RegisterEventCallback(
    button_event_t buttonEvent,
    button_event_callback procbuttonEvent
) {
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
    pEventCallbacks[buttonEvent] = procbuttonEvent;
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	4905      	ldr	r1, [pc, #20]	@ (8001140 <Button_RegisterEventCallback+0x24>)
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200000ec 	.word	0x200000ec

08001144 <ButtonScanTypeEdge>:
 * @retval None
 */
void
ButtonScanTypeEdge(
    void *arg
) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	buttondat_p bt = (buttondat_p)arg;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	60fb      	str	r3, [r7, #12]
    uint8_t i = bt->index;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	7a9b      	ldrb	r3, [r3, #10]
 8001154:	72fb      	strb	r3, [r7, #11]
    
    if (GPIO_ReadInputDataBit(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 8001156:	7afb      	ldrb	r3, [r7, #11]
 8001158:	4a78      	ldr	r2, [pc, #480]	@ (800133c <ButtonScanTypeEdge+0x1f8>)
 800115a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800115e:	7afb      	ldrb	r3, [r7, #11]
 8001160:	4976      	ldr	r1, [pc, #472]	@ (800133c <ButtonScanTypeEdge+0x1f8>)
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	440b      	add	r3, r1
 8001166:	889b      	ldrh	r3, [r3, #4]
 8001168:	4619      	mov	r1, r3
 800116a:	4610      	mov	r0, r2
 800116c:	f7ff fb74 	bl	8000858 <GPIO_ReadInputDataBit>
 8001170:	4603      	mov	r3, r0
 8001172:	4619      	mov	r1, r3
 8001174:	7afb      	ldrb	r3, [r7, #11]
 8001176:	4a71      	ldr	r2, [pc, #452]	@ (800133c <ButtonScanTypeEdge+0x1f8>)
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	4413      	add	r3, r2
 800117c:	799b      	ldrb	r3, [r3, #6]
 800117e:	4299      	cmp	r1, r3
 8001180:	d10a      	bne.n	8001198 <ButtonScanTypeEdge+0x54>
        if (bt->countActive != 0xFFU) {
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	7b5b      	ldrb	r3, [r3, #13]
 8001186:	2bff      	cmp	r3, #255	@ 0xff
 8001188:	d013      	beq.n	80011b2 <ButtonScanTypeEdge+0x6e>
            bt->countActive++;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	7b5b      	ldrb	r3, [r3, #13]
 800118e:	3301      	adds	r3, #1
 8001190:	b2da      	uxtb	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	735a      	strb	r2, [r3, #13]
 8001196:	e00c      	b.n	80011b2 <ButtonScanTypeEdge+0x6e>
        }
    }
    else {
        if (bt->countInactive != 0xFFU) {
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	7b1b      	ldrb	r3, [r3, #12]
 800119c:	2bff      	cmp	r3, #255	@ 0xff
 800119e:	d005      	beq.n	80011ac <ButtonScanTypeEdge+0x68>
            bt->countInactive++;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	7b1b      	ldrb	r3, [r3, #12]
 80011a4:	3301      	adds	r3, #1
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	731a      	strb	r2, [r3, #12]
        }
        
        bt->countActive = 0;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2200      	movs	r2, #0
 80011b0:	735a      	strb	r2, [r3, #13]
    }
    
    if (bt->countInactive >= KEY_COUNT_IS_PRESS) {
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	7b1b      	ldrb	r3, [r3, #12]
 80011b6:	2b09      	cmp	r3, #9
 80011b8:	d958      	bls.n	800126c <ButtonScanTypeEdge+0x128>
        if (bt->sold == PIN_ACTIVE) {
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	7a5b      	ldrb	r3, [r3, #9]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d118      	bne.n	80011f4 <ButtonScanTypeEdge+0xb0>
            bt->sold = PIN_UNACTIVE;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	725a      	strb	r2, [r3, #9]
            
            if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_TYPE_EDGE)) {
 80011c8:	4b5d      	ldr	r3, [pc, #372]	@ (8001340 <ButtonScanTypeEdge+0x1fc>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00b      	beq.n	80011e8 <ButtonScanTypeEdge+0xa4>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	7adb      	ldrb	r3, [r3, #11]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <ButtonScanTypeEdge+0xa4>
                pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_FALLING);
 80011dc:	4b58      	ldr	r3, [pc, #352]	@ (8001340 <ButtonScanTypeEdge+0x1fc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	7afa      	ldrb	r2, [r7, #11]
 80011e2:	2101      	movs	r1, #1
 80011e4:	4610      	mov	r0, r2
 80011e6:	4798      	blx	r3
            }
            
            bt->time = bt->countInactive;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	7b1b      	ldrb	r3, [r3, #12]
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	e03b      	b.n	800126c <ButtonScanTypeEdge+0x128>
        } else {
            bt->time++;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	601a      	str	r2, [r3, #0]
            if (bt->time >= TIMECNT_BW2PRESS) {
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b4f      	cmp	r3, #79	@ 0x4f
 8001204:	d932      	bls.n	800126c <ButtonScanTypeEdge+0x128>
                if (bt->holdCnt != 0) {
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d012      	beq.n	8001234 <ButtonScanTypeEdge+0xf0>
                    if ((pEventCallbacks[BUTTON_EVENT_RELEASE] != NULL) && (bt->mode & BUTTON_TYPE_LOGIC)) {
 800120e:	4b4c      	ldr	r3, [pc, #304]	@ (8001340 <ButtonScanTypeEdge+0x1fc>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d024      	beq.n	8001260 <ButtonScanTypeEdge+0x11c>
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	7adb      	ldrb	r3, [r3, #11]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	2b00      	cmp	r3, #0
 8001220:	d01e      	beq.n	8001260 <ButtonScanTypeEdge+0x11c>
                        pEventCallbacks[BUTTON_EVENT_RELEASE](i, bt->holdCnt);
 8001222:	4b47      	ldr	r3, [pc, #284]	@ (8001340 <ButtonScanTypeEdge+0x1fc>)
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	6852      	ldr	r2, [r2, #4]
 800122a:	b291      	uxth	r1, r2
 800122c:	7afa      	ldrb	r2, [r7, #11]
 800122e:	4610      	mov	r0, r2
 8001230:	4798      	blx	r3
 8001232:	e015      	b.n	8001260 <ButtonScanTypeEdge+0x11c>
                    }
                }
                else if ((pEventCallbacks[BUTTON_EVENT_PRESS] != NULL) && (bt->mode & BUTTON_TYPE_LOGIC) \
 8001234:	4b42      	ldr	r3, [pc, #264]	@ (8001340 <ButtonScanTypeEdge+0x1fc>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d011      	beq.n	8001260 <ButtonScanTypeEdge+0x11c>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	7adb      	ldrb	r3, [r3, #11]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00b      	beq.n	8001260 <ButtonScanTypeEdge+0x11c>
                         && bt->pressCnt != 0) 
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	7a1b      	ldrb	r3, [r3, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d007      	beq.n	8001260 <ButtonScanTypeEdge+0x11c>
                {
                    pEventCallbacks[BUTTON_EVENT_PRESS](i, bt->pressCnt);
 8001250:	4b3b      	ldr	r3, [pc, #236]	@ (8001340 <ButtonScanTypeEdge+0x1fc>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	7a12      	ldrb	r2, [r2, #8]
 8001258:	4611      	mov	r1, r2
 800125a:	7afa      	ldrb	r2, [r7, #11]
 800125c:	4610      	mov	r0, r2
 800125e:	4798      	blx	r3
                }
                
                bt->holdCnt = 0;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
                bt->pressCnt = 0;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	721a      	strb	r2, [r3, #8]
            }
        }
    }
    
    if (bt->countActive >= KEY_COUNT_IS_PRESS) {
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	7b5b      	ldrb	r3, [r3, #13]
 8001270:	2b09      	cmp	r3, #9
 8001272:	d95e      	bls.n	8001332 <ButtonScanTypeEdge+0x1ee>
        /* reset count inactive */
        bt->countInactive = 0; 
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2200      	movs	r2, #0
 8001278:	731a      	strb	r2, [r3, #12]
        
        if (bt->sold == PIN_UNACTIVE) {
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	7a5b      	ldrb	r3, [r3, #9]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d11e      	bne.n	80012c0 <ButtonScanTypeEdge+0x17c>
            bt->sold = PIN_ACTIVE;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2201      	movs	r2, #1
 8001286:	725a      	strb	r2, [r3, #9]
            
            if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_TYPE_EDGE)) {
 8001288:	4b2d      	ldr	r3, [pc, #180]	@ (8001340 <ButtonScanTypeEdge+0x1fc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00b      	beq.n	80012a8 <ButtonScanTypeEdge+0x164>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	7adb      	ldrb	r3, [r3, #11]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <ButtonScanTypeEdge+0x164>
                pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_RISING);
 800129c:	4b28      	ldr	r3, [pc, #160]	@ (8001340 <ButtonScanTypeEdge+0x1fc>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	7afa      	ldrb	r2, [r7, #11]
 80012a2:	2100      	movs	r1, #0
 80012a4:	4610      	mov	r0, r2
 80012a6:	4798      	blx	r3
            }
            
            bt->time = bt->countActive;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	7b5b      	ldrb	r3, [r3, #13]
 80012ac:	461a      	mov	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	601a      	str	r2, [r3, #0]
            bt->pressCnt++;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	7a1b      	ldrb	r3, [r3, #8]
 80012b6:	3301      	adds	r3, #1
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	721a      	strb	r2, [r3, #8]
                    }
                }
            }
        }
    }
}
 80012be:	e038      	b.n	8001332 <ButtonScanTypeEdge+0x1ee>
            bt->time++;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	601a      	str	r2, [r3, #0]
            if (bt->time >= TIMECNT_IS_HOLD) {
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b77      	cmp	r3, #119	@ 0x77
 80012d0:	d92f      	bls.n	8001332 <ButtonScanTypeEdge+0x1ee>
                bt->pressCnt = 0;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2200      	movs	r2, #0
 80012d6:	721a      	strb	r2, [r3, #8]
                bt->holdCnt = bt->time;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	605a      	str	r2, [r3, #4]
                if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b78      	cmp	r3, #120	@ 0x78
 80012e6:	d012      	beq.n	800130e <ButtonScanTypeEdge+0x1ca>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2bc8      	cmp	r3, #200	@ 0xc8
 80012ee:	d00e      	beq.n	800130e <ButtonScanTypeEdge+0x1ca>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80012f8:	d009      	beq.n	800130e <ButtonScanTypeEdge+0x1ca>
                    (bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S)) 
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	685b      	ldr	r3, [r3, #4]
                if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 80012fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001302:	d004      	beq.n	800130e <ButtonScanTypeEdge+0x1ca>
                    (bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S)) 
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800130c:	d111      	bne.n	8001332 <ButtonScanTypeEdge+0x1ee>
                    if (pEventCallbacks[BUTTON_EVENT_HOLD] != NULL && (bt->mode & BUTTON_TYPE_LOGIC)) {
 800130e:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <ButtonScanTypeEdge+0x1fc>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00d      	beq.n	8001332 <ButtonScanTypeEdge+0x1ee>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	7adb      	ldrb	r3, [r3, #11]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <ButtonScanTypeEdge+0x1ee>
                        pEventCallbacks[BUTTON_EVENT_HOLD](i, bt->holdCnt);
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <ButtonScanTypeEdge+0x1fc>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	6852      	ldr	r2, [r2, #4]
 800132a:	b291      	uxth	r1, r2
 800132c:	7afa      	ldrb	r2, [r7, #11]
 800132e:	4610      	mov	r0, r2
 8001330:	4798      	blx	r3
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000024 	.word	0x20000024
 8001340:	200000ec 	.word	0x200000ec

08001344 <ButtonScan>:
 * @retval None
 */
void
ButtonScan(
    void *arg
) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MAX_ELEMENT; i++) {
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e014      	b.n	800137c <ButtonScan+0x38>
        kpad[i].scanBtnFunc(&kpad[i]);
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	490d      	ldr	r1, [pc, #52]	@ (800138c <ButtonScan+0x48>)
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	3310      	adds	r3, #16
 8001362:	6819      	ldr	r1, [r3, #0]
 8001364:	7bfa      	ldrb	r2, [r7, #15]
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4a07      	ldr	r2, [pc, #28]	@ (800138c <ButtonScan+0x48>)
 8001370:	4413      	add	r3, r2
 8001372:	4618      	mov	r0, r3
 8001374:	4788      	blx	r1
    for (uint8_t i = 0; i < MAX_ELEMENT; i++) {
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	3301      	adds	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2b05      	cmp	r3, #5
 8001380:	d9e7      	bls.n	8001352 <ButtonScan+0xe>
    }
}
 8001382:	bf00      	nop
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000074 	.word	0x20000074

08001390 <BTNGPIO_Init>:
 * @brief  Initializes module button
 * @param  None
 * @retval None
 */
static void BTNGPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001396:	2101      	movs	r1, #1
 8001398:	2002      	movs	r0, #2
 800139a:	f7ff fba7 	bl	8000aec <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800139e:	2101      	movs	r1, #1
 80013a0:	2004      	movs	r0, #4
 80013a2:	f7ff fba3 	bl	8000aec <RCC_AHB1PeriphClockCmd>

	/* GPIOA Configuration: Channel 1 and 3 as alternate function push-pull */
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80013a6:	2300      	movs	r3, #0
 80013a8:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80013aa:	2303      	movs	r3, #3
 80013ac:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80013ae:	2301      	movs	r3, #1
 80013b0:	71fb      	strb	r3, [r7, #7]

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_7;
 80013b2:	f44f 5302 	mov.w	r3, #8320	@ 0x2080
 80013b6:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	4806      	ldr	r0, [pc, #24]	@ (80013d8 <BTNGPIO_Init+0x48>)
 80013be:	f7ff f9bc 	bl	800073a <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
 80013c2:	2339      	movs	r3, #57	@ 0x39
 80013c4:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80013c6:	463b      	mov	r3, r7
 80013c8:	4619      	mov	r1, r3
 80013ca:	4804      	ldr	r0, [pc, #16]	@ (80013dc <BTNGPIO_Init+0x4c>)
 80013cc:	f7ff f9b5 	bl	800073a <GPIO_Init>

//	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
//	GPIO_Init(GPIOA, &GPIO_InitStructure);
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40020800 	.word	0x40020800
 80013dc:	40020400 	.word	0x40020400

080013e0 <EventButton_Init>:
 * @brief  Initialize events of button
 * @param  pFuncAppProcEvent: funtion callback
 * @retval None
 */
void
EventButton_Init(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
    /* Init callback functions */
	Button_RegisterEventCallback(BUTTON_EVENT_EDGE, ButtonProcessEventEdge);
 80013e4:	4915      	ldr	r1, [pc, #84]	@ (800143c <EventButton_Init+0x5c>)
 80013e6:	2000      	movs	r0, #0
 80013e8:	f7ff fe98 	bl	800111c <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_PRESS, ButtonProcessEventPress);
 80013ec:	4914      	ldr	r1, [pc, #80]	@ (8001440 <EventButton_Init+0x60>)
 80013ee:	2001      	movs	r0, #1
 80013f0:	f7ff fe94 	bl	800111c <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_HOLD, ButtonProcessEventHold);
 80013f4:	4913      	ldr	r1, [pc, #76]	@ (8001444 <EventButton_Init+0x64>)
 80013f6:	2002      	movs	r0, #2
 80013f8:	f7ff fe90 	bl	800111c <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_RELEASE, ButtonProcessEventRelease);
 80013fc:	4912      	ldr	r1, [pc, #72]	@ (8001448 <EventButton_Init+0x68>)
 80013fe:	2003      	movs	r0, #3
 8001400:	f7ff fe8c 	bl	800111c <Button_RegisterEventCallback>
    
    /* Init mode of buttons */
    Button_SetMode(BUTTON_BOARD_ID, BUTTON_TYPE_LOGIC);
 8001404:	2101      	movs	r1, #1
 8001406:	2000      	movs	r0, #0
 8001408:	f7ff fe6a 	bl	80010e0 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID1, BUTTON_TYPE_LOGIC);
 800140c:	2101      	movs	r1, #1
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff fe66 	bl	80010e0 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID2, BUTTON_TYPE_LOGIC);
 8001414:	2101      	movs	r1, #1
 8001416:	2002      	movs	r0, #2
 8001418:	f7ff fe62 	bl	80010e0 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID3, BUTTON_TYPE_LOGIC);
 800141c:	2101      	movs	r1, #1
 800141e:	2003      	movs	r0, #3
 8001420:	f7ff fe5e 	bl	80010e0 <Button_SetMode>
	Button_SetMode(BUTTON_KIT_ID4, BUTTON_TYPE_LOGIC);
 8001424:	2101      	movs	r1, #1
 8001426:	2004      	movs	r0, #4
 8001428:	f7ff fe5a 	bl	80010e0 <Button_SetMode>
    Button_SetMode(BUTTON_KIT_ID5, BUTTON_TYPE_LOGIC);
 800142c:	2101      	movs	r1, #1
 800142e:	2005      	movs	r0, #5
 8001430:	f7ff fe56 	bl	80010e0 <Button_SetMode>

    Button_Init();
 8001434:	f7ff fdf6 	bl	8001024 <Button_Init>
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	0800144d 	.word	0x0800144d
 8001440:	08001481 	.word	0x08001481
 8001444:	080014c9 	.word	0x080014c9
 8001448:	08001527 	.word	0x08001527

0800144c <ButtonProcessEventEdge>:
 */
static void 
ButtonProcessEventEdge(
    uint8_t btnID,
    uint16_t edge
) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	460a      	mov	r2, r1
 8001456:	71fb      	strb	r3, [r7, #7]
 8001458:	4613      	mov	r3, r2
 800145a:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

    if (edge == BUTTON_EDGE_RISING)
 800145c:	88bb      	ldrh	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d103      	bne.n	800146a <ButtonProcessEventEdge+0x1e>
    {
    	event = EVENT_OF_BUTTON_0_PRESS_EDGE_RISING + btnID;
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	3306      	adds	r3, #6
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e002      	b.n	8001470 <ButtonProcessEventEdge+0x24>
    }
    else /* (edge == BUTTON_EDGE_FAILING) */
    {
    	event = EVENT_OF_BUTTON_0_PRESS_EDGE_FALLING + btnID;
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	330c      	adds	r3, #12
 800146e:	73fb      	strb	r3, [r7, #15]
    }

    EventSchedulerAdd(event);
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f8a2 	bl	80015bc <EventSchedulerAdd>
}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <ButtonProcessEventPress>:
 */
static void 
ButtonProcessEventPress(
    uint8_t btnID,
    uint16_t time
) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	460a      	mov	r2, r1
 800148a:	71fb      	strb	r3, [r7, #7]
 800148c:	4613      	mov	r3, r2
 800148e:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time == 1)
 8001490:	88bb      	ldrh	r3, [r7, #4]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d102      	bne.n	800149c <ButtonProcessEventPress+0x1c>
	{
		event = EVENT_OF_BUTTON_0_PRESS_LOGIC + btnID;
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	e00c      	b.n	80014b6 <ButtonProcessEventPress+0x36>
	}
	else if (time == 2)
 800149c:	88bb      	ldrh	r3, [r7, #4]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d103      	bne.n	80014aa <ButtonProcessEventPress+0x2a>
	{
		event = EVENT_OF_BUTTON_0_PRESS_2_TIMES + btnID;
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	3312      	adds	r3, #18
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	e005      	b.n	80014b6 <ButtonProcessEventPress+0x36>
	}
	else if (time == 5)
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	2b05      	cmp	r3, #5
 80014ae:	d107      	bne.n	80014c0 <ButtonProcessEventPress+0x40>
	{
		event = EVENT_OF_BUTTON_0_PRESS_5_TIMES + btnID;
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	3318      	adds	r3, #24
 80014b4:	73fb      	strb	r3, [r7, #15]
	}
	else return;

    EventSchedulerAdd(event);
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f87f 	bl	80015bc <EventSchedulerAdd>
 80014be:	e000      	b.n	80014c2 <ButtonProcessEventPress+0x42>
	else return;
 80014c0:	bf00      	nop
}
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <ButtonProcessEventHold>:
 */
static void 
ButtonProcessEventHold(
    uint8_t btnID,
    uint16_t time
) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	460a      	mov	r2, r1
 80014d2:	71fb      	strb	r3, [r7, #7]
 80014d4:	4613      	mov	r3, r2
 80014d6:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time == TIMECNT_HOLD10S)
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80014de:	d103      	bne.n	80014e8 <ButtonProcessEventHold+0x20>
	{
		event = EVENT_OF_BUTTON_0_HOLD_10S + btnID;
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	3330      	adds	r3, #48	@ 0x30
 80014e4:	73fb      	strb	r3, [r7, #15]
 80014e6:	e015      	b.n	8001514 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD5S)
 80014e8:	88bb      	ldrh	r3, [r7, #4]
 80014ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014ee:	d103      	bne.n	80014f8 <ButtonProcessEventHold+0x30>
	{
		event = EVENT_OF_BUTTON_0_HOLD_5S + btnID;
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	332a      	adds	r3, #42	@ 0x2a
 80014f4:	73fb      	strb	r3, [r7, #15]
 80014f6:	e00d      	b.n	8001514 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD3S)
 80014f8:	88bb      	ldrh	r3, [r7, #4]
 80014fa:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80014fe:	d103      	bne.n	8001508 <ButtonProcessEventHold+0x40>
	{
		event = EVENT_OF_BUTTON_0_HOLD_3S + btnID;
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	3324      	adds	r3, #36	@ 0x24
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	e005      	b.n	8001514 <ButtonProcessEventHold+0x4c>
	}
	else if (time == TIMECNT_HOLD1S)
 8001508:	88bb      	ldrh	r3, [r7, #4]
 800150a:	2bc8      	cmp	r3, #200	@ 0xc8
 800150c:	d107      	bne.n	800151e <ButtonProcessEventHold+0x56>
	{
		event = EVENT_OF_BUTTON_0_HOLD_1S + btnID;
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	331e      	adds	r3, #30
 8001512:	73fb      	strb	r3, [r7, #15]
	}
	else return;

	EventSchedulerAdd(event);
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	4618      	mov	r0, r3
 8001518:	f000 f850 	bl	80015bc <EventSchedulerAdd>
 800151c:	e000      	b.n	8001520 <ButtonProcessEventHold+0x58>
	else return;
 800151e:	bf00      	nop
}
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <ButtonProcessEventRelease>:
 */
static void 
ButtonProcessEventRelease(
    uint8_t btnID,
    uint16_t time
) {
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	460a      	mov	r2, r1
 8001530:	71fb      	strb	r3, [r7, #7]
 8001532:	4613      	mov	r3, r2
 8001534:	80bb      	strh	r3, [r7, #4]
	uint8_t event;

	if (time >= TIMECNT_HOLD10S)
 8001536:	88bb      	ldrh	r3, [r7, #4]
 8001538:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800153c:	d303      	bcc.n	8001546 <ButtonProcessEventRelease+0x20>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_10S + btnID;
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	3348      	adds	r3, #72	@ 0x48
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e015      	b.n	8001572 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD5S)
 8001546:	88bb      	ldrh	r3, [r7, #4]
 8001548:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800154c:	d303      	bcc.n	8001556 <ButtonProcessEventRelease+0x30>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_5S + btnID;
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	3342      	adds	r3, #66	@ 0x42
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e00d      	b.n	8001572 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD3S)
 8001556:	88bb      	ldrh	r3, [r7, #4]
 8001558:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800155c:	d303      	bcc.n	8001566 <ButtonProcessEventRelease+0x40>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_3S + btnID;
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	333c      	adds	r3, #60	@ 0x3c
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	e005      	b.n	8001572 <ButtonProcessEventRelease+0x4c>
	}
	else if (time >= TIMECNT_HOLD1S)
 8001566:	88bb      	ldrh	r3, [r7, #4]
 8001568:	2bc7      	cmp	r3, #199	@ 0xc7
 800156a:	d907      	bls.n	800157c <ButtonProcessEventRelease+0x56>
	{
		event = EVENT_OF_BUTTON_0_RELEASED_1S + btnID;
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	3336      	adds	r3, #54	@ 0x36
 8001570:	73fb      	strb	r3, [r7, #15]
	}
	else return;

	EventSchedulerAdd(event);
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	4618      	mov	r0, r3
 8001576:	f000 f821 	bl	80015bc <EventSchedulerAdd>
 800157a:	e000      	b.n	800157e <ButtonProcessEventRelease+0x58>
	else return;
 800157c:	bf00      	nop
}
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <EventSchedulerInit>:
 * @retval None
 */
void
EventSchedulerInit(
    app_state_callback func
) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
    if (func != NULL) {
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d009      	beq.n	80015a6 <EventSchedulerInit+0x22>
        pAppStateFunc = func;
 8001592:	4a07      	ldr	r2, [pc, #28]	@ (80015b0 <EventSchedulerInit+0x2c>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6013      	str	r3, [r2, #0]
        bufInit(pBuffEvent, &eventQueue, sizeof(uint8_t), SIZE_EVENT_QUEUE);
 8001598:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800159c:	2201      	movs	r2, #1
 800159e:	4905      	ldr	r1, [pc, #20]	@ (80015b4 <EventSchedulerInit+0x30>)
 80015a0:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <EventSchedulerInit+0x34>)
 80015a2:	f000 fa85 	bl	8001ab0 <bufInit>
    }
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200000fc 	.word	0x200000fc
 80015b4:	20000200 	.word	0x20000200
 80015b8:	20000100 	.word	0x20000100

080015bc <EventSchedulerAdd>:
 * @retval None
 */
type_status_t
EventSchedulerAdd(
    const uint8_t pvItemToQueue
) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
    if (bufEnDat(&eventQueue, (uint8_t *)&pvItemToQueue) == ERR_OK) {
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	4619      	mov	r1, r3
 80015ca:	4806      	ldr	r0, [pc, #24]	@ (80015e4 <EventSchedulerAdd+0x28>)
 80015cc:	f000 faca 	bl	8001b64 <bufEnDat>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <EventSchedulerAdd+0x1e>
        return SUCCESS;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <EventSchedulerAdd+0x20>
    }
    
    return FAIL;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000200 	.word	0x20000200

080015e8 <processEventScheduler>:
 * @brief  Proccess event in queue
 * @param  None
 * @retval None
 */
void
processEventScheduler(void) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
	uint8_t event;
    
    if (pAppStateFunc != NULL) {
 80015ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <processEventScheduler+0x30>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00c      	beq.n	8001610 <processEventScheduler+0x28>
        if (bufDeDat(&eventQueue, (uint8_t *)&event) == ERR_OK) {
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	4619      	mov	r1, r3
 80015fa:	4808      	ldr	r0, [pc, #32]	@ (800161c <processEventScheduler+0x34>)
 80015fc:	f000 fb01 	bl	8001c02 <bufDeDat>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d104      	bne.n	8001610 <processEventScheduler+0x28>
            pAppStateFunc(event);
 8001606:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <processEventScheduler+0x30>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	79fa      	ldrb	r2, [r7, #7]
 800160c:	4610      	mov	r0, r2
 800160e:	4798      	blx	r3
        }
    }
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200000fc 	.word	0x200000fc
 800161c:	20000200 	.word	0x20000200

08001620 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	da0b      	bge.n	800164c <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	490c      	ldr	r1, [pc, #48]	@ (800166c <NVIC_SetPriority+0x4c>)
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	f003 030f 	and.w	r3, r3, #15
 8001640:	3b04      	subs	r3, #4
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164a:	e009      	b.n	8001660 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	4907      	ldr	r1, [pc, #28]	@ (8001670 <NVIC_SetPriority+0x50>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00
 8001670:	e000e100 	.word	0xe000e100

08001674 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001684:	d301      	bcc.n	800168a <SysTick_Config+0x16>
 8001686:	2301      	movs	r3, #1
 8001688:	e00f      	b.n	80016aa <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168a:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <SysTick_Config+0x40>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001692:	210f      	movs	r1, #15
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f7ff ffc2 	bl	8001620 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <SysTick_Config+0x40>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a2:	4b04      	ldr	r3, [pc, #16]	@ (80016b4 <SysTick_Config+0x40>)
 80016a4:	2207      	movs	r2, #7
 80016a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	e000e010 	.word	0xe000e010

080016b8 <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 80016be:	463b      	mov	r3, r7
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff f965 	bl	8000990 <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	4a0a      	ldr	r2, [pc, #40]	@ (80016f4 <TimerInit+0x3c>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	099b      	lsrs	r3, r3, #6
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ffcf 	bl	8001674 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 80016d6:	2101      	movs	r1, #1
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f7ff ffa0 	bl	8001620 <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 80016e0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80016e4:	2100      	movs	r1, #0
 80016e6:	4804      	ldr	r0, [pc, #16]	@ (80016f8 <TimerInit+0x40>)
 80016e8:	f000 fad0 	bl	8001c8c <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	10624dd3 	.word	0x10624dd3
 80016f8:	20000210 	.word	0x20000210

080016fc <TimerStart>:
    char* name,
	uint32_t wMilSecTick,
	uint8_t byRepeats,
	void (*callback)(void *),
    void *pcallbackData
) {   
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	4613      	mov	r3, r2
 800170a:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 800170c:	2300      	movs	r3, #0
 800170e:	75fb      	strb	r3, [r7, #23]
 8001710:	e04c      	b.n	80017ac <TimerStart+0xb0>
    {
        if (g_pTimerHandle[i].callbackFunc == NULL)
 8001712:	7dfa      	ldrb	r2, [r7, #23]
 8001714:	4929      	ldr	r1, [pc, #164]	@ (80017bc <TimerStart+0xc0>)
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	440b      	add	r3, r1
 8001720:	3310      	adds	r3, #16
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d13e      	bne.n	80017a6 <TimerStart+0xaa>
        {
            g_pTimerHandle[i].name = name;
 8001728:	7dfa      	ldrb	r2, [r7, #23]
 800172a:	4924      	ldr	r1, [pc, #144]	@ (80017bc <TimerStart+0xc0>)
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].callbackFunc = callback;
 800173a:	7dfa      	ldrb	r2, [r7, #23]
 800173c:	491f      	ldr	r1, [pc, #124]	@ (80017bc <TimerStart+0xc0>)
 800173e:	4613      	mov	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	3310      	adds	r3, #16
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].repeats = byRepeats;
 800174e:	7dfa      	ldrb	r2, [r7, #23]
 8001750:	491a      	ldr	r1, [pc, #104]	@ (80017bc <TimerStart+0xc0>)
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	330c      	adds	r3, #12
 800175e:	79fa      	ldrb	r2, [r7, #7]
 8001760:	701a      	strb	r2, [r3, #0]
            g_pTimerHandle[i].pCallbackData = pcallbackData;
 8001762:	7dfa      	ldrb	r2, [r7, #23]
 8001764:	4915      	ldr	r1, [pc, #84]	@ (80017bc <TimerStart+0xc0>)
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	440b      	add	r3, r1
 8001770:	3314      	adds	r3, #20
 8001772:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001774:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecStart = GetMilSecTick();
 8001776:	7dfc      	ldrb	r4, [r7, #23]
 8001778:	f000 f872 	bl	8001860 <GetMilSecTick>
 800177c:	4602      	mov	r2, r0
 800177e:	490f      	ldr	r1, [pc, #60]	@ (80017bc <TimerStart+0xc0>)
 8001780:	4623      	mov	r3, r4
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4423      	add	r3, r4
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	3304      	adds	r3, #4
 800178c:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecTimeout = wMilSecTick;
 800178e:	7dfa      	ldrb	r2, [r7, #23]
 8001790:	490a      	ldr	r1, [pc, #40]	@ (80017bc <TimerStart+0xc0>)
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	440b      	add	r3, r1
 800179c:	3308      	adds	r3, #8
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	601a      	str	r2, [r3, #0]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", timeCall = ");
            DBG_TIMER_SEND_NUM(wMilSecTick);
            DBG_TIMER_SEND_STR("\n");

            return i;
 80017a2:	7dfb      	ldrb	r3, [r7, #23]
 80017a4:	e006      	b.n	80017b4 <TimerStart+0xb8>
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 80017a6:	7dfb      	ldrb	r3, [r7, #23]
 80017a8:	3301      	adds	r3, #1
 80017aa:	75fb      	strb	r3, [r7, #23]
 80017ac:	7dfb      	ldrb	r3, [r7, #23]
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	d9af      	bls.n	8001712 <TimerStart+0x16>
        }
    }
    
    return NO_TIMER;
 80017b2:	23ff      	movs	r3, #255	@ 0xff
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	371c      	adds	r7, #28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd90      	pop	{r4, r7, pc}
 80017bc:	20000210 	.word	0x20000210

080017c0 <TimerStop>:
 * @retval None
 */
uint8_t
TimerStop(
    uint8_t byTimerId
) {   
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b0f      	cmp	r3, #15
 80017ce:	d80a      	bhi.n	80017e6 <TimerStop+0x26>
 80017d0:	79fa      	ldrb	r2, [r7, #7]
 80017d2:	4922      	ldr	r1, [pc, #136]	@ (800185c <TimerStop+0x9c>)
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	440b      	add	r3, r1
 80017de:	3310      	adds	r3, #16
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <TimerStop+0x2a>
        return 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e031      	b.n	800184e <TimerStop+0x8e>
    DBG_TIMER_SEND_STR(g_pTimerHandle[byTimerId].name);
    DBG_TIMER_SEND_STR(" Id = "); 
    DBG_TIMER_SEND_NUM(byTimerId);
    DBG_TIMER_SEND_STR("\n");
    
    g_pTimerHandle[byTimerId].name = NULL;
 80017ea:	79fa      	ldrb	r2, [r7, #7]
 80017ec:	491b      	ldr	r1, [pc, #108]	@ (800185c <TimerStop+0x9c>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].callbackFunc = NULL;
 80017fc:	79fa      	ldrb	r2, [r7, #7]
 80017fe:	4917      	ldr	r1, [pc, #92]	@ (800185c <TimerStop+0x9c>)
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	3310      	adds	r3, #16
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].repeats = 0;
 8001810:	79fa      	ldrb	r2, [r7, #7]
 8001812:	4912      	ldr	r1, [pc, #72]	@ (800185c <TimerStop+0x9c>)
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	330c      	adds	r3, #12
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecTimeout = 0;
 8001824:	79fa      	ldrb	r2, [r7, #7]
 8001826:	490d      	ldr	r1, [pc, #52]	@ (800185c <TimerStop+0x9c>)
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	3308      	adds	r3, #8
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecStart = 0;
 8001838:	79fa      	ldrb	r2, [r7, #7]
 800183a:	4908      	ldr	r1, [pc, #32]	@ (800185c <TimerStop+0x9c>)
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3304      	adds	r3, #4
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
    
    return 1;
 800184c:	2301      	movs	r3, #1
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000210 	.word	0x20000210

08001860 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <GetMilSecTick+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000390 	.word	0x20000390

08001878 <processTimerScheduler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
processTimerScheduler(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
    void (*callbackfunc)(void *);
    void *pPrameter;
    
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 800187e:	2300      	movs	r3, #0
 8001880:	73fb      	strb	r3, [r7, #15]
 8001882:	e068      	b.n	8001956 <processTimerScheduler+0xde>
    {
        if ((g_pTimerHandle[i].callbackFunc != NULL) && TimeExpired(i))
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	4938      	ldr	r1, [pc, #224]	@ (8001968 <processTimerScheduler+0xf0>)
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	440b      	add	r3, r1
 8001892:	3310      	adds	r3, #16
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d05a      	beq.n	8001950 <processTimerScheduler+0xd8>
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f865 	bl	800196c <TimeExpired>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d053      	beq.n	8001950 <processTimerScheduler+0xd8>
        {
            callbackfunc = g_pTimerHandle[i].callbackFunc;
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	492f      	ldr	r1, [pc, #188]	@ (8001968 <processTimerScheduler+0xf0>)
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	3310      	adds	r3, #16
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	60bb      	str	r3, [r7, #8]
            pPrameter = g_pTimerHandle[i].pCallbackData;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	492a      	ldr	r1, [pc, #168]	@ (8001968 <processTimerScheduler+0xf0>)
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	3314      	adds	r3, #20
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	607b      	str	r3, [r7, #4]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", CB = ");
            DBG_TIMER_SEND_NUM((uint32_t)callbackfunc);
            DBG_TIMER_SEND_STR("\n");
            
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	4925      	ldr	r1, [pc, #148]	@ (8001968 <processTimerScheduler+0xf0>)
 80018d4:	4613      	mov	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	330c      	adds	r3, #12
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2bff      	cmp	r3, #255	@ 0xff
 80018e6:	d020      	beq.n	800192a <processTimerScheduler+0xb2>
                (g_pTimerHandle[i].repeats != TIMER_REPEAT_ONE_TIME))
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	491f      	ldr	r1, [pc, #124]	@ (8001968 <processTimerScheduler+0xf0>)
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	330c      	adds	r3, #12
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b2db      	uxtb	r3, r3
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d014      	beq.n	800192a <processTimerScheduler+0xb2>
                 g_pTimerHandle[i].repeats--;
 8001900:	7bfa      	ldrb	r2, [r7, #15]
 8001902:	4919      	ldr	r1, [pc, #100]	@ (8001968 <processTimerScheduler+0xf0>)
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	440b      	add	r3, r1
 800190e:	330c      	adds	r3, #12
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b2d8      	uxtb	r0, r3
 8001918:	4913      	ldr	r1, [pc, #76]	@ (8001968 <processTimerScheduler+0xf0>)
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	440b      	add	r3, r1
 8001924:	330c      	adds	r3, #12
 8001926:	4602      	mov	r2, r0
 8001928:	701a      	strb	r2, [r3, #0]
            
            if (g_pTimerHandle[i].repeats == TIMER_REPEAT_ONE_TIME) {
 800192a:	7bfa      	ldrb	r2, [r7, #15]
 800192c:	490e      	ldr	r1, [pc, #56]	@ (8001968 <processTimerScheduler+0xf0>)
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	330c      	adds	r3, #12
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d103      	bne.n	800194a <processTimerScheduler+0xd2>
                 DBG_TIMER_SEND_STR("$ CANCEL \n");
                 TimerStop(i);
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff3b 	bl	80017c0 <TimerStop>
            }
            
            callbackfunc(pPrameter);
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	4798      	blx	r3
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	3301      	adds	r3, #1
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	2b0f      	cmp	r3, #15
 800195a:	d993      	bls.n	8001884 <processTimerScheduler+0xc>
        }
    }
}
 800195c:	bf00      	nop
 800195e:	bf00      	nop
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000210 	.word	0x20000210

0800196c <TimeExpired>:
 * @retval TRUE or FALSE
 */
uint8_t
TimeExpired(
    uint8_t byTimerId
) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
    uint32_t wMilSecTick;
    uint32_t wDeltaMilSec = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800197a:	b672      	cpsid	i
}
 800197c:	bf00      	nop
    
    __disable_irq();
    wMilSecTick = GetMilSecTick();
 800197e:	f7ff ff6f 	bl	8001860 <GetMilSecTick>
 8001982:	60b8      	str	r0, [r7, #8]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	2b0f      	cmp	r3, #15
 8001988:	d80a      	bhi.n	80019a0 <TimeExpired+0x34>
 800198a:	79fa      	ldrb	r2, [r7, #7]
 800198c:	492b      	ldr	r1, [pc, #172]	@ (8001a3c <TimeExpired+0xd0>)
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	3310      	adds	r3, #16
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d103      	bne.n	80019a8 <TimeExpired+0x3c>
  __ASM volatile ("cpsie i" : : : "memory");
 80019a0:	b662      	cpsie	i
}
 80019a2:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 80019a4:	2300      	movs	r3, #0
 80019a6:	e044      	b.n	8001a32 <TimeExpired+0xc6>
    }
      
    if (wMilSecTick >= g_pTimerHandle[byTimerId].milSecStart) 
 80019a8:	79fa      	ldrb	r2, [r7, #7]
 80019aa:	4924      	ldr	r1, [pc, #144]	@ (8001a3c <TimeExpired+0xd0>)
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	3304      	adds	r3, #4
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d30c      	bcc.n	80019da <TimeExpired+0x6e>
    {
        wDeltaMilSec = wMilSecTick - g_pTimerHandle[byTimerId].milSecStart;
 80019c0:	79fa      	ldrb	r2, [r7, #7]
 80019c2:	491e      	ldr	r1, [pc, #120]	@ (8001a3c <TimeExpired+0xd0>)
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	3304      	adds	r3, #4
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	e00e      	b.n	80019f8 <TimeExpired+0x8c>
    } 
    else
    {
        wDeltaMilSec = g_pTimerHandle[byTimerId].milSecStart - wMilSecTick;
 80019da:	79fa      	ldrb	r2, [r7, #7]
 80019dc:	4917      	ldr	r1, [pc, #92]	@ (8001a3c <TimeExpired+0xd0>)
 80019de:	4613      	mov	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	440b      	add	r3, r1
 80019e8:	3304      	adds	r3, #4
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	60fb      	str	r3, [r7, #12]
        wDeltaMilSec = 0xFFFFFFFFU - wDeltaMilSec;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	60fb      	str	r3, [r7, #12]
    }
    
    if (wDeltaMilSec < g_pTimerHandle[byTimerId].milSecTimeout)
 80019f8:	79fa      	ldrb	r2, [r7, #7]
 80019fa:	4910      	ldr	r1, [pc, #64]	@ (8001a3c <TimeExpired+0xd0>)
 80019fc:	4613      	mov	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	4413      	add	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	440b      	add	r3, r1
 8001a06:	3308      	adds	r3, #8
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d203      	bcs.n	8001a18 <TimeExpired+0xac>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a10:	b662      	cpsie	i
}
 8001a12:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	e00c      	b.n	8001a32 <TimeExpired+0xc6>
    }
    
    g_pTimerHandle[byTimerId].milSecStart = wMilSecTick;
 8001a18:	79fa      	ldrb	r2, [r7, #7]
 8001a1a:	4908      	ldr	r1, [pc, #32]	@ (8001a3c <TimeExpired+0xd0>)
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	3304      	adds	r3, #4
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a2c:	b662      	cpsie	i
}
 8001a2e:	bf00      	nop
    
    __enable_irq();
    
    return 1;
 8001a30:	2301      	movs	r3, #1
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000210 	.word	0x20000210

08001a40 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8001a44:	4b04      	ldr	r3, [pc, #16]	@ (8001a58 <SysTick_Handler+0x18>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a03      	ldr	r2, [pc, #12]	@ (8001a58 <SysTick_Handler+0x18>)
 8001a4c:	6013      	str	r3, [r2, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	20000390 	.word	0x20000390

08001a5c <USART2_IRQHandler>:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a62:	b672      	cpsid	i
}
 8001a64:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 8001a66:	f240 5125 	movw	r1, #1317	@ 0x525
 8001a6a:	480f      	ldr	r0, [pc, #60]	@ (8001aa8 <USART2_IRQHandler+0x4c>)
 8001a6c:	f7ff fa62 	bl	8000f34 <USART_GetITStatus>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d112      	bne.n	8001a9c <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8001a76:	4b0d      	ldr	r3, [pc, #52]	@ (8001aac <USART2_IRQHandler+0x50>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8001a7c:	480a      	ldr	r0, [pc, #40]	@ (8001aa8 <USART2_IRQHandler+0x4c>)
 8001a7e:	f7ff fa2d 	bl	8000edc <USART_ReceiveData>
 8001a82:	4603      	mov	r3, r0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8001a88:	1cfb      	adds	r3, r7, #3
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f869 	bl	8001b64 <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8001a92:	f240 5125 	movw	r1, #1317	@ 0x525
 8001a96:	4804      	ldr	r0, [pc, #16]	@ (8001aa8 <USART2_IRQHandler+0x4c>)
 8001a98:	f7ff faa7 	bl	8000fea <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a9c:	b662      	cpsie	i
}
 8001a9e:	bf00      	nop
    }
    __enable_irq();
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40004400 	.word	0x40004400
 8001aac:	20000394 	.word	0x20000394

08001ab0 <bufInit>:
bufInit(
    void *pBuffer,
    buffqueue_p pQueue,
	uint8_t sizeofElement,
	uint16_t numberOfElement
) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	4611      	mov	r1, r2
 8001abc:	461a      	mov	r2, r3
 8001abe:	460b      	mov	r3, r1
 8001ac0:	71fb      	strb	r3, [r7, #7]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	80bb      	strh	r3, [r7, #4]
    pQueue->wSize = numberOfElement;
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	88ba      	ldrh	r2, [r7, #4]
 8001aca:	801a      	strh	r2, [r3, #0]
    pQueue->byItemSize = sizeofElement;
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	79fa      	ldrb	r2, [r7, #7]
 8001ad0:	711a      	strb	r2, [r3, #4]
    pQueue->pData = (uint8_t *)pBuffer;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	60da      	str	r2, [r3, #12]
    bufFlush(pQueue);
 8001ad8:	68b8      	ldr	r0, [r7, #8]
 8001ada:	f000 f82a 	bl	8001b32 <bufFlush>
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	885a      	ldrh	r2, [r3, #2]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	bf2c      	ite	cs
 8001afa:	2301      	movcs	r3, #1
 8001afc:	2300      	movcc	r3, #0
 8001afe:	b2db      	uxtb	r3, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <bufIsEmpty>:
 * @return 1 if empty; 0 otherwise
 */
uint8_t
bufIsEmpty(
    buffqueue_p pQueue
) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
    return (pQueue->wHeadIndex == pQueue->wTailIndex);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	88da      	ldrh	r2, [r3, #6]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	891b      	ldrh	r3, [r3, #8]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	bf0c      	ite	eq
 8001b20:	2301      	moveq	r3, #1
 8001b22:	2300      	movne	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <bufFlush>:
 * @retval None
 */
void
bufFlush(
    buffqueue_p pQueue
) {
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
    pQueue->wHeadIndex = 0;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	80da      	strh	r2, [r3, #6]
    pQueue->wTailIndex = 0;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	811a      	strh	r2, [r3, #8]
    pQueue->wCountEle = 0;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	805a      	strh	r2, [r3, #2]
    
    memsetl(pQueue->pData, 0, pQueue->wSize);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68d8      	ldr	r0, [r3, #12]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	2100      	movs	r1, #0
 8001b58:	f000 f898 	bl	8001c8c <memsetl>
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6e:	b672      	cpsid	i
}
 8001b70:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8001b72:	2300      	movs	r3, #0
 8001b74:	73fb      	strb	r3, [r7, #15]
 8001b76:	e021      	b.n	8001bbc <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	441a      	add	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	88c9      	ldrh	r1, [r1, #6]
 8001b86:	440b      	add	r3, r1
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	88db      	ldrh	r3, [r3, #6]
 8001b90:	3301      	adds	r3, #1
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	b21b      	sxth	r3, r3
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	b21b      	sxth	r3, r3
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	885b      	ldrh	r3, [r3, #2]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	791b      	ldrb	r3, [r3, #4]
 8001bc0:	7bfa      	ldrb	r2, [r7, #15]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d3d8      	bcc.n	8001b78 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff8d 	bl	8001ae6 <bufIsFull>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d010      	beq.n	8001bf4 <bufEnDat+0x90>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	891b      	ldrh	r3, [r3, #8]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	7912      	ldrb	r2, [r2, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	3b01      	subs	r3, #1
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	4013      	ands	r3, r2
 8001bec:	b21b      	sxth	r3, r3
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8001bf4:	b662      	cpsie	i
}
 8001bf6:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <bufDeDat>:
 */
uint8_t
bufDeDat(
    buffqueue_p pQueue,
	uint8_t *pBuffer
) {
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c0c:	b672      	cpsid	i
}
 8001c0e:	bf00      	nop
	__disable_irq();
    
    if (bufIsEmpty(pQueue)) {
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff7b 	bl	8001b0c <bufIsEmpty>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d006      	beq.n	8001c2a <bufDeDat+0x28>
        /* No items */
        pQueue->wCountEle = 0;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	805a      	strh	r2, [r3, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c22:	b662      	cpsie	i
}
 8001c24:	bf00      	nop
        __enable_irq();
        return ERR_BUF_EMPTY;
 8001c26:	2302      	movs	r3, #2
 8001c28:	e02c      	b.n	8001c84 <bufDeDat+0x82>
    }
    
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	e021      	b.n	8001c74 <bufDeDat+0x72>
        pBuffer[i] = pQueue->pData[pQueue->wTailIndex];
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	8912      	ldrh	r2, [r2, #8]
 8001c38:	441a      	add	r2, r3
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	6839      	ldr	r1, [r7, #0]
 8001c3e:	440b      	add	r3, r1
 8001c40:	7812      	ldrb	r2, [r2, #0]
 8001c42:	701a      	strb	r2, [r3, #0]
        pQueue->wTailIndex = ((pQueue->wTailIndex + 1) & (pQueue->wSize - 1));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	891b      	ldrh	r3, [r3, #8]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	b21a      	sxth	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4013      	ands	r3, r2
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	811a      	strh	r2, [r3, #8]
        pQueue->wCountEle--;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	885b      	ldrh	r3, [r3, #2]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	3301      	adds	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	791b      	ldrb	r3, [r3, #4]
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d3d8      	bcc.n	8001c30 <bufDeDat+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 8001c7e:	b662      	cpsie	i
}
 8001c80:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	803b      	strh	r3, [r7, #0]
    while (size--) {
 8001c9c:	e004      	b.n	8001ca8 <memsetl+0x1c>
        *dst++ = value;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	701a      	strb	r2, [r3, #0]
    while (size--) {
 8001ca8:	883b      	ldrh	r3, [r7, #0]
 8001caa:	1e5a      	subs	r2, r3, #1
 8001cac:	803a      	strh	r2, [r7, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f5      	bne.n	8001c9e <memsetl+0x12>
    }    
}
 8001cb2:	bf00      	nop
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <SetStateApp>:
	STATE_APP_STARTUP, STATE_APP_IDLE, STATE_APP_RESET
}state_app_t;


static void SetStateApp(state_app_t state)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
	// Set state of application
	eCurrentState = state;
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4a03      	ldr	r2, [pc, #12]	@ (8001cdc <SetStateApp+0x1c>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	200003a0 	.word	0x200003a0

08001ce0 <GetStateApp>:

static state_app_t GetStateApp()
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
	//Return state of application
	return eCurrentState;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	@ (8001cf4 <GetStateApp+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	b2db      	uxtb	r3, r3
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	200003a0 	.word	0x200003a0

08001cf8 <AppStateManager>:


//Goi ham su kien
static void AppStateManager(uint8_t event)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
	switch(GetStateApp())
 8001d02:	f7ff ffed 	bl	8001ce0 <GetStateApp>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d012      	beq.n	8001d32 <AppStateManager+0x3a>
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	dc12      	bgt.n	8001d36 <AppStateManager+0x3e>
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <AppStateManager+0x22>
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d007      	beq.n	8001d28 <AppStateManager+0x30>
			}
			break;
		case STATE_APP_RESET:
			break;
		default:
			break;
 8001d18:	e00d      	b.n	8001d36 <AppStateManager+0x3e>
			if(event == EVENT_APP_INIT)
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d10c      	bne.n	8001d3a <AppStateManager+0x42>
				SetStateApp(STATE_APP_IDLE);
 8001d20:	2001      	movs	r0, #1
 8001d22:	f7ff ffcd 	bl	8001cc0 <SetStateApp>
			break;
 8001d26:	e008      	b.n	8001d3a <AppStateManager+0x42>
				DeviceStateMachine(event);// anh dat breakpoint o day nen biet dc gia tri event la 2
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 fa4a 	bl	80021c4 <DeviceStateMachine>
			break;
 8001d30:	e004      	b.n	8001d3c <AppStateManager+0x44>
			break;
 8001d32:	bf00      	nop
 8001d34:	e002      	b.n	8001d3c <AppStateManager+0x44>
			break;
 8001d36:	bf00      	nop
 8001d38:	e000      	b.n	8001d3c <AppStateManager+0x44>
			break;
 8001d3a:	bf00      	nop
	}
}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <main>:


int main(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af02      	add	r7, sp, #8
	SystemCoreClockUpdate();
 8001d4a:	f7fe fa79 	bl	8000240 <SystemCoreClockUpdate>
	AutomaticPump_Init();
 8001d4e:	f000 f879 	bl	8001e44 <AutomaticPump_Init>
	ButtonBoard_Init();
 8001d52:	f000 f8cd 	bl	8001ef0 <ButtonBoard_Init>
	SoilMoisture_Init();
 8001d56:	f000 f859 	bl	8001e0c <SoilMoisture_Init>
	Led_Init();
 8001d5a:	f000 f891 	bl	8001e80 <Led_Init>
	TimeBasic_Init();
 8001d5e:	f000 f833 	bl	8001dc8 <TimeBasic_Init>
	TimerInit();
 8001d62:	f7ff fca9 	bl	80016b8 <TimerInit>
	ADCSoilMoisture_Init();
 8001d66:	f000 f99f 	bl	80020a8 <ADCSoilMoisture_Init>
	USART2_Init();
 8001d6a:	f000 f9d9 	bl	8002120 <USART2_Init>
	ADC_SoftwareStartConv(ADC1);
 8001d6e:	4811      	ldr	r0, [pc, #68]	@ (8001db4 <main+0x70>)
 8001d70:	f7fe fcac 	bl	80006cc <ADC_SoftwareStartConv>
	EventButton_Init();
 8001d74:	f7ff fb34 	bl	80013e0 <EventButton_Init>
	EventSchedulerInit(AppStateManager);
 8001d78:	480f      	ldr	r0, [pc, #60]	@ (8001db8 <main+0x74>)
 8001d7a:	f7ff fc03 	bl	8001584 <EventSchedulerInit>
	SetStateApp(STATE_APP_STARTUP);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f7ff ff9e 	bl	8001cc0 <SetStateApp>
	EventSchedulerAdd(EVENT_APP_INIT);
 8001d84:	2001      	movs	r0, #1
 8001d86:	f7ff fc19 	bl	80015bc <EventSchedulerAdd>
	sensorUpdateTimerId = TimerStart(
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <main+0x78>)
 8001d90:	22ff      	movs	r2, #255	@ 0xff
 8001d92:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001d96:	480a      	ldr	r0, [pc, #40]	@ (8001dc0 <main+0x7c>)
 8001d98:	f7ff fcb0 	bl	80016fc <TimerStart>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4b08      	ldr	r3, [pc, #32]	@ (8001dc4 <main+0x80>)
 8001da2:	701a      	strb	r2, [r3, #0]
							);

    /* Loop forever */
	while(1)
	{
		processTimerScheduler();
 8001da4:	f7ff fd68 	bl	8001878 <processTimerScheduler>
		processEventScheduler();
 8001da8:	f7ff fc1e 	bl	80015e8 <processEventScheduler>
		processAutoRunPump();
 8001dac:	f000 fa68 	bl	8002280 <processAutoRunPump>
		processTimerScheduler();
 8001db0:	bf00      	nop
 8001db2:	e7f7      	b.n	8001da4 <main+0x60>
 8001db4:	40012000 	.word	0x40012000
 8001db8:	08001cf9 	.word	0x08001cf9
 8001dbc:	08001fa5 	.word	0x08001fa5
 8001dc0:	08002400 	.word	0x08002400
 8001dc4:	20000056 	.word	0x20000056

08001dc8 <TimeBasic_Init>:

	}
}

static void TimeBasic_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef	Timer_InitStructure;

	RCC_APB2PeriphClockCmd( RCC_APB2Periph_TIM1, ENABLE);
 8001dce:	2101      	movs	r1, #1
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f7fe fecb 	bl	8000b6c <RCC_APB2PeriphClockCmd>

	Timer_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	80fb      	strh	r3, [r7, #6]

	Timer_InitStructure.TIM_Prescaler = 83;
 8001dda:	2353      	movs	r3, #83	@ 0x53
 8001ddc:	80bb      	strh	r3, [r7, #4]

	Timer_InitStructure.TIM_Period = 999;
 8001dde:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001de2:	60bb      	str	r3, [r7, #8]

	Timer_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	81bb      	strh	r3, [r7, #12]

	Timer_InitStructure.TIM_RepetitionCounter = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	73bb      	strb	r3, [r7, #14]

	TIM_TimeBaseInit(TIM1, &Timer_InitStructure);
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <TimeBasic_Init+0x40>)
 8001df2:	f7fe fefb 	bl	8000bec <TIM_TimeBaseInit>
	TIM_Cmd( TIM1, ENABLE);
 8001df6:	2101      	movs	r1, #1
 8001df8:	4803      	ldr	r0, [pc, #12]	@ (8001e08 <TimeBasic_Init+0x40>)
 8001dfa:	f7fe ff63 	bl	8000cc4 <TIM_Cmd>
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40010000 	.word	0x40010000

08001e0c <SoilMoisture_Init>:


static void SoilMoisture_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd( LAND_GPIO_RCC, ENABLE);
 8001e12:	2101      	movs	r1, #1
 8001e14:	2001      	movs	r0, #1
 8001e16:	f7fe fe69 	bl	8000aec <RCC_AHB1PeriphClockCmd>
	//Cau hinh chan PA2 cho do am dat
	GPIO_InitStructure.GPIO_Pin = LAND_GPIO_PIN;
 8001e1a:	2310      	movs	r3, #16
 8001e1c:	603b      	str	r3, [r7, #0]

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	713b      	strb	r3, [r7, #4]

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001e22:	2302      	movs	r3, #2
 8001e24:	717b      	strb	r3, [r7, #5]

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001e26:	2300      	movs	r3, #0
 8001e28:	71bb      	strb	r3, [r7, #6]

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	71fb      	strb	r3, [r7, #7]

	GPIO_Init( LAND_GPIO_PORT, &GPIO_InitStructure);
 8001e2e:	463b      	mov	r3, r7
 8001e30:	4619      	mov	r1, r3
 8001e32:	4803      	ldr	r0, [pc, #12]	@ (8001e40 <SoilMoisture_Init+0x34>)
 8001e34:	f7fe fc81 	bl	800073a <GPIO_Init>
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40020000 	.word	0x40020000

08001e44 <AutomaticPump_Init>:

static void AutomaticPump_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd( PUMP_GPIO_RCC, ENABLE);
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	2004      	movs	r0, #4
 8001e4e:	f7fe fe4d 	bl	8000aec <RCC_AHB1PeriphClockCmd>
	//Cau hinh chan PB1 cho bom tu dong
	GPIO_InitStructure.GPIO_Pin = PUMP_GPIO_PIN;
 8001e52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e56:	603b      	str	r3, [r7, #0]

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	717b      	strb	r3, [r7, #5]

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	713b      	strb	r3, [r7, #4]

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001e60:	2300      	movs	r3, #0
 8001e62:	71bb      	strb	r3, [r7, #6]

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001e64:	2301      	movs	r3, #1
 8001e66:	71fb      	strb	r3, [r7, #7]

	GPIO_Init( PUMP_GPIO_PORT, &GPIO_InitStructure);
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4803      	ldr	r0, [pc, #12]	@ (8001e7c <AutomaticPump_Init+0x38>)
 8001e6e:	f7fe fc64 	bl	800073a <GPIO_Init>

}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40020800 	.word	0x40020800

08001e80 <Led_Init>:


static void Led_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(LED_GPIO_RCC, ENABLE);
 8001e86:	2101      	movs	r1, #1
 8001e88:	2004      	movs	r0, #4
 8001e8a:	f7fe fe2f 	bl	8000aec <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = LED_GPIO_PIN;
 8001e8e:	2340      	movs	r3, #64	@ 0x40
 8001e90:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001e92:	2301      	movs	r3, #1
 8001e94:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001e96:	2302      	movs	r3, #2
 8001e98:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(LED_GPIO_PORT, &GPIO_InitStructure);
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4803      	ldr	r0, [pc, #12]	@ (8001eb0 <Led_Init+0x30>)
 8001ea4:	f7fe fc49 	bl	800073a <GPIO_Init>
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40020800 	.word	0x40020800

08001eb4 <Led_Control>:

static void Led_Control(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t status)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	707b      	strb	r3, [r7, #1]
	if(status == GPIO_PIN_SET)
 8001ec4:	787b      	ldrb	r3, [r7, #1]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d105      	bne.n	8001ed6 <Led_Control+0x22>
	{
		GPIO_SetBits(GPIOx, GPIO_Pin);
 8001eca:	887b      	ldrh	r3, [r7, #2]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7fe fcf6 	bl	80008c0 <GPIO_SetBits>
	}
	else if(status == GPIO_PIN_RESET)
	{
		GPIO_ResetBits(GPIOx, GPIO_Pin);
	}
}
 8001ed4:	e007      	b.n	8001ee6 <Led_Control+0x32>
	else if(status == GPIO_PIN_RESET)
 8001ed6:	787b      	ldrb	r3, [r7, #1]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d104      	bne.n	8001ee6 <Led_Control+0x32>
		GPIO_ResetBits(GPIOx, GPIO_Pin);
 8001edc:	887b      	ldrh	r3, [r7, #2]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7fe fcfc 	bl	80008de <GPIO_ResetBits>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <ButtonBoard_Init>:

static void ButtonBoard_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	GPIO_InitStructure;
//	EXTI_InitTypeDef	EXTI_InitStructure;
//	NVIC_InitTypeDef	NVIC_InitStructure;

	//Cap xung clock cho nut nhan
	RCC_AHB1PeriphClockCmd(BUTTON_GPIO_RCC, ENABLE);
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	2002      	movs	r0, #2
 8001efa:	f7fe fdf7 	bl	8000aec <RCC_AHB1PeriphClockCmd>
	//Cau hinh chan PB3 cho nut nhan
	GPIO_InitStructure.GPIO_Pin = BUTTON_GPIO_PIN;
 8001efe:	2308      	movs	r3, #8
 8001f00:	603b      	str	r3, [r7, #0]

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001f02:	2302      	movs	r3, #2
 8001f04:	717b      	strb	r3, [r7, #5]

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001f06:	2300      	movs	r3, #0
 8001f08:	71bb      	strb	r3, [r7, #6]

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	713b      	strb	r3, [r7, #4]

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	71fb      	strb	r3, [r7, #7]

	GPIO_Init( BUTTON_GPIO_PORT, &GPIO_InitStructure);
 8001f12:	463b      	mov	r3, r7
 8001f14:	4619      	mov	r1, r3
 8001f16:	4803      	ldr	r0, [pc, #12]	@ (8001f24 <ButtonBoard_Init+0x34>)
 8001f18:	f7fe fc0f 	bl	800073a <GPIO_Init>

}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40020400 	.word	0x40020400

08001f28 <AutoPump_Control>:

static void AutoPump_Control(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t status)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	807b      	strh	r3, [r7, #2]
 8001f34:	4613      	mov	r3, r2
 8001f36:	707b      	strb	r3, [r7, #1]
	if(status == GPIO_PIN_SET)
 8001f38:	787b      	ldrb	r3, [r7, #1]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d105      	bne.n	8001f4a <AutoPump_Control+0x22>
	{
		GPIO_SetBits(GPIOx, GPIO_Pin);
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	4619      	mov	r1, r3
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe fcbc 	bl	80008c0 <GPIO_SetBits>
	}
	else if(status == GPIO_PIN_RESET)
	{
		GPIO_ResetBits(GPIOx, GPIO_Pin);
	}
}
 8001f48:	e007      	b.n	8001f5a <AutoPump_Control+0x32>
	else if(status == GPIO_PIN_RESET)
 8001f4a:	787b      	ldrb	r3, [r7, #1]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d104      	bne.n	8001f5a <AutoPump_Control+0x32>
		GPIO_ResetBits(GPIOx, GPIO_Pin);
 8001f50:	887b      	ldrh	r3, [r7, #2]
 8001f52:	4619      	mov	r1, r3
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7fe fcc2 	bl	80008de <GPIO_ResetBits>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <Pump_GetLogic>:
		while(TIM_GetCounter( TIM1) != 999);
		ms--;
	}
}
static uint8_t Pump_GetLogic(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	807b      	strh	r3, [r7, #2]
	return GPIO_ReadOutputDataBit(GPIOx, GPIO_Pin);
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	4619      	mov	r1, r3
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe fc8a 	bl	800088c <GPIO_ReadOutputDataBit>
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <enableAutoPump>:
static void enableAutoPump(void *pArg)
 {
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
     (void)pArg; // Không dùng tham số
     autoRunPumpStatus = 1; // Kích hoạt lại chế độ tự động
 8001f8c:	4b04      	ldr	r3, [pc, #16]	@ (8001fa0 <enableAutoPump+0x1c>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
 }
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000055 	.word	0x20000055

08001fa4 <UpdateSoilHumidity>:
static void UpdateSoilHumidity(void *pArg) // Thêm tham số void*
 {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

 	uint16_t rawADC;
 	float percent;


 	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC) == RESET);
 8001fac:	bf00      	nop
 8001fae:	2102      	movs	r1, #2
 8001fb0:	4835      	ldr	r0, [pc, #212]	@ (8002088 <UpdateSoilHumidity+0xe4>)
 8001fb2:	f7fe fba8 	bl	8000706 <ADC_GetFlagStatus>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f8      	beq.n	8001fae <UpdateSoilHumidity+0xa>
 	rawADC = ADC_GetConversionValue(ADC1);
 8001fbc:	4832      	ldr	r0, [pc, #200]	@ (8002088 <UpdateSoilHumidity+0xe4>)
 8001fbe:	f7fe fb95 	bl	80006ec <ADC_GetConversionValue>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	827b      	strh	r3, [r7, #18]

 	float adcRange = ADC_VALUE_DRY - ADC_VALUE_WET;
 8001fc6:	4b31      	ldr	r3, [pc, #196]	@ (800208c <UpdateSoilHumidity+0xe8>)
 8001fc8:	60fb      	str	r3, [r7, #12]
 	if (adcRange <= 0) {
 8001fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd6:	d811      	bhi.n	8001ffc <UpdateSoilHumidity+0x58>
 		percent = (rawADC <= ADC_VALUE_WET) ? 100.0f : 0.0f;
 8001fd8:	8a7b      	ldrh	r3, [r7, #18]
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe2:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002090 <UpdateSoilHumidity+0xec>
 8001fe6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fee:	d801      	bhi.n	8001ff4 <UpdateSoilHumidity+0x50>
 8001ff0:	4b28      	ldr	r3, [pc, #160]	@ (8002094 <UpdateSoilHumidity+0xf0>)
 8001ff2:	e001      	b.n	8001ff8 <UpdateSoilHumidity+0x54>
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e012      	b.n	8002022 <UpdateSoilHumidity+0x7e>
 	} else {
 		percent = 100.0f * (ADC_VALUE_DRY - (float)rawADC) / adcRange;
 8001ffc:	8a7b      	ldrh	r3, [r7, #18]
 8001ffe:	ee07 3a90 	vmov	s15, r3
 8002002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002006:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002098 <UpdateSoilHumidity+0xf4>
 800200a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800200e:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800209c <UpdateSoilHumidity+0xf8>
 8002012:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002016:	ed97 7a03 	vldr	s14, [r7, #12]
 800201a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800201e:	edc7 7a05 	vstr	s15, [r7, #20]
 	}

 	//0 -> 100%
 	if (percent > 100.0f) {
 8002022:	edd7 7a05 	vldr	s15, [r7, #20]
 8002026:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800209c <UpdateSoilHumidity+0xf8>
 800202a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800202e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002032:	dd02      	ble.n	800203a <UpdateSoilHumidity+0x96>
 		percent = 100.0f;
 8002034:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <UpdateSoilHumidity+0xf0>)
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	e009      	b.n	800204e <UpdateSoilHumidity+0xaa>
 	} else if (percent < 0.0f) {
 800203a:	edd7 7a05 	vldr	s15, [r7, #20]
 800203e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002046:	d502      	bpl.n	800204e <UpdateSoilHumidity+0xaa>
 		percent = 0.0f;
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
 	}

 	latestHumidityPercent = percent;
 800204e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002056:	ee17 3a90 	vmov	r3, s15
 800205a:	b29a      	uxth	r2, r3
 800205c:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <UpdateSoilHumidity+0xfc>)
 800205e:	801a      	strh	r2, [r3, #0]

 	uint16_t moistureIntToSend = (uint16_t)latestHumidityPercent;
 8002060:	4b0f      	ldr	r3, [pc, #60]	@ (80020a0 <UpdateSoilHumidity+0xfc>)
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	817b      	strh	r3, [r7, #10]
 	while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
 8002066:	bf00      	nop
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	480e      	ldr	r0, [pc, #56]	@ (80020a4 <UpdateSoilHumidity+0x100>)
 800206c:	f7fe ff46 	bl	8000efc <USART_GetFlagStatus>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f8      	beq.n	8002068 <UpdateSoilHumidity+0xc4>
 	USART_SendData(USART2, moistureIntToSend);
 8002076:	897b      	ldrh	r3, [r7, #10]
 8002078:	4619      	mov	r1, r3
 800207a:	480a      	ldr	r0, [pc, #40]	@ (80020a4 <UpdateSoilHumidity+0x100>)
 800207c:	f7fe ff1c 	bl	8000eb8 <USART_SendData>

 }
 8002080:	bf00      	nop
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40012000 	.word	0x40012000
 800208c:	44bb8000 	.word	0x44bb8000
 8002090:	44bb8000 	.word	0x44bb8000
 8002094:	42c80000 	.word	0x42c80000
 8002098:	453b8000 	.word	0x453b8000
 800209c:	42c80000 	.word	0x42c80000
 80020a0:	2000039e 	.word	0x2000039e
 80020a4:	40004400 	.word	0x40004400

080020a8 <ADCSoilMoisture_Init>:

static void ADCSoilMoisture_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	@ 0x28
 80020ac:	af00      	add	r7, sp, #0
	ADC_InitTypeDef			ADC_InitStructure;
	ADC_CommonInitTypeDef	ADC_CommonInitStructure;
	//Enable peripheral clocks
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80020ae:	2101      	movs	r1, #1
 80020b0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80020b4:	f7fe fd5a 	bl	8000b6c <RCC_APB2PeriphClockCmd>

	ADC_DeInit();
 80020b8:	f7fe f996 	bl	80003e8 <ADC_DeInit>

	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 80020bc:	2300      	movs	r3, #0
 80020be:	603b      	str	r3, [r7, #0]
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 80020c0:	2300      	movs	r3, #0
 80020c2:	607b      	str	r3, [r7, #4]
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
	ADC_CommonInit(&ADC_CommonInitStructure);
 80020cc:	463b      	mov	r3, r7
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe f9ee 	bl	80004b0 <ADC_CommonInit>

	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	753b      	strb	r3, [r7, #20]
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 80020dc:	2301      	movs	r3, #1
 80020de:	757b      	strb	r3, [r7, #21]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80020e8:	2300      	movs	r3, #0
 80020ea:	623b      	str	r3, [r7, #32]
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 80020ec:	2301      	movs	r3, #1
 80020ee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	ADC_Init(ADC1, &ADC_InitStructure);
 80020f2:	f107 0310 	add.w	r3, r7, #16
 80020f6:	4619      	mov	r1, r3
 80020f8:	4808      	ldr	r0, [pc, #32]	@ (800211c <ADCSoilMoisture_Init+0x74>)
 80020fa:	f7fe f983 	bl	8000404 <ADC_Init>

	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 1, ADC_SampleTime_144Cycles);
 80020fe:	2306      	movs	r3, #6
 8002100:	2201      	movs	r2, #1
 8002102:	2104      	movs	r1, #4
 8002104:	4805      	ldr	r0, [pc, #20]	@ (800211c <ADCSoilMoisture_Init+0x74>)
 8002106:	f7fe fa17 	bl	8000538 <ADC_RegularChannelConfig>

//	ADC_TempSensorVrefintCmd(ENABLE);

	ADC_Cmd(ADC1, ENABLE);
 800210a:	2101      	movs	r1, #1
 800210c:	4803      	ldr	r0, [pc, #12]	@ (800211c <ADCSoilMoisture_Init+0x74>)
 800210e:	f7fe f9f7 	bl	8000500 <ADC_Cmd>
}
 8002112:	bf00      	nop
 8002114:	3728      	adds	r7, #40	@ 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40012000 	.word	0x40012000

08002120 <USART2_Init>:
static void USART2_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef		GPIO_InitStructure;
	USART_InitTypeDef		USART_InitStructure;
	// Enable GPIO clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002126:	2101      	movs	r1, #1
 8002128:	2001      	movs	r0, #1
 800212a:	f7fe fcdf 	bl	8000aec <RCC_AHB1PeriphClockCmd>

	// Configure USART Tx as alternate function push-pull-
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800212e:	2302      	movs	r3, #2
 8002130:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002132:	2303      	movs	r3, #3
 8002134:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002136:	2300      	movs	r3, #0
 8002138:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800213a:	2301      	movs	r3, #1
 800213c:	75fb      	strb	r3, [r7, #23]

	GPIO_InitStructure.GPIO_Pin = USART2_TX;
 800213e:	2304      	movs	r3, #4
 8002140:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002142:	f107 0310 	add.w	r3, r7, #16
 8002146:	4619      	mov	r1, r3
 8002148:	4813      	ldr	r0, [pc, #76]	@ (8002198 <USART2_Init+0x78>)
 800214a:	f7fe faf6 	bl	800073a <GPIO_Init>

	// Connect USART pins-
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 800214e:	2207      	movs	r2, #7
 8002150:	2102      	movs	r1, #2
 8002152:	4811      	ldr	r0, [pc, #68]	@ (8002198 <USART2_Init+0x78>)
 8002154:	f7fe fbd2 	bl	80008fc <GPIO_PinAFConfig>

	// Enable USART clock-
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 8002158:	2101      	movs	r1, #1
 800215a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800215e:	f7fe fce5 	bl	8000b2c <RCC_APB1PeriphClockCmd>

	USART_InitStructure.USART_BaudRate = USART2_Baud;
 8002162:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8002166:	603b      	str	r3, [r7, #0]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8002168:	2300      	movs	r3, #0
 800216a:	80bb      	strh	r3, [r7, #4]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800216c:	2300      	movs	r3, #0
 800216e:	80fb      	strh	r3, [r7, #6]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8002170:	2300      	movs	r3, #0
 8002172:	813b      	strh	r3, [r7, #8]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002174:	2300      	movs	r3, #0
 8002176:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_Mode = USART_Mode_Tx;
 8002178:	2308      	movs	r3, #8
 800217a:	817b      	strh	r3, [r7, #10]
	USART_Init(USART2, &USART_InitStructure);
 800217c:	463b      	mov	r3, r7
 800217e:	4619      	mov	r1, r3
 8002180:	4806      	ldr	r0, [pc, #24]	@ (800219c <USART2_Init+0x7c>)
 8002182:	f7fe fdbf 	bl	8000d04 <USART_Init>
	// Enable USART-
	USART_Cmd(USART2, ENABLE);
 8002186:	2101      	movs	r1, #1
 8002188:	4804      	ldr	r0, [pc, #16]	@ (800219c <USART2_Init+0x7c>)
 800218a:	f7fe fe75 	bl	8000e78 <USART_Cmd>
}
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40020000 	.word	0x40020000
 800219c:	40004400 	.word	0x40004400

080021a0 <GetSoilHumidityPercent>:

static float GetSoilHumidityPercent(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
 	return latestHumidityPercent;
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <GetSoilHumidityPercent+0x20>)
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80021b2:	eeb0 0a67 	vmov.f32	s0, s15
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	2000039e 	.word	0x2000039e

080021c4 <DeviceStateMachine>:
void DeviceStateMachine(uint8_t event)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
	switch(event)
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d144      	bne.n	800225e <DeviceStateMachine+0x9a>
		case EVENT_OF_BUTTON_2_PRESS_LOGIC:




			if(Pump_GetLogic(PUMP_GPIO_PORT, PUMP_GPIO_PIN) == 1)
 80021d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021d8:	4823      	ldr	r0, [pc, #140]	@ (8002268 <DeviceStateMachine+0xa4>)
 80021da:	f7ff fec2 	bl	8001f62 <Pump_GetLogic>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d12a      	bne.n	800223a <DeviceStateMachine+0x76>
			{
				autoRunPumpStatus = 0;
 80021e4:	4b21      	ldr	r3, [pc, #132]	@ (800226c <DeviceStateMachine+0xa8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
				AutoPump_Control(PUMP_GPIO_PORT, PUMP_GPIO_PIN, GPIO_PIN_RESET);
 80021ea:	2200      	movs	r2, #0
 80021ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021f0:	481d      	ldr	r0, [pc, #116]	@ (8002268 <DeviceStateMachine+0xa4>)
 80021f2:	f7ff fe99 	bl	8001f28 <AutoPump_Control>
				Led_Control( LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	2140      	movs	r1, #64	@ 0x40
 80021fa:	481b      	ldr	r0, [pc, #108]	@ (8002268 <DeviceStateMachine+0xa4>)
 80021fc:	f7ff fe5a 	bl	8001eb4 <Led_Control>
				currentPumpState = PUMP_IDLE;
 8002200:	4b1b      	ldr	r3, [pc, #108]	@ (8002270 <DeviceStateMachine+0xac>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]


				// Hủy timer bật lại auto (nếu đang chạy)
 				if (autoPumpTimerId != NO_TIMER)
 8002206:	4b1b      	ldr	r3, [pc, #108]	@ (8002274 <DeviceStateMachine+0xb0>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2bff      	cmp	r3, #255	@ 0xff
 800220c:	d007      	beq.n	800221e <DeviceStateMachine+0x5a>
 				{
 					TimerStop(autoPumpTimerId); // *** Cần hàm TimerStop ***
 800220e:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <DeviceStateMachine+0xb0>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fad4 	bl	80017c0 <TimerStop>
 					autoPumpTimerId = NO_TIMER;
 8002218:	4b16      	ldr	r3, [pc, #88]	@ (8002274 <DeviceStateMachine+0xb0>)
 800221a:	22ff      	movs	r2, #255	@ 0xff
 800221c:	701a      	strb	r2, [r3, #0]
 				}

				autoPumpTimerId = TimerStart("AutoTask", 10000, 1, enableAutoPump, NULL); // Em phai goi timer stop o tren no moi huy tac vu hien tai
 800221e:	2300      	movs	r3, #0
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <DeviceStateMachine+0xb4>)
 8002224:	2201      	movs	r2, #1
 8002226:	f242 7110 	movw	r1, #10000	@ 0x2710
 800222a:	4814      	ldr	r0, [pc, #80]	@ (800227c <DeviceStateMachine+0xb8>)
 800222c:	f7ff fa66 	bl	80016fc <TimerStart>
 8002230:	4603      	mov	r3, r0
 8002232:	461a      	mov	r2, r3
 8002234:	4b0f      	ldr	r3, [pc, #60]	@ (8002274 <DeviceStateMachine+0xb0>)
 8002236:	701a      	strb	r2, [r3, #0]
				autoRunPumpStatus = 1;
				AutoPump_Control(PUMP_GPIO_PORT, PUMP_GPIO_PIN, GPIO_PIN_SET);
				Led_Control( LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_SET);
				currentPumpState = PUMP_RUNNING;
			}
			break;
 8002238:	e012      	b.n	8002260 <DeviceStateMachine+0x9c>
				autoRunPumpStatus = 1;
 800223a:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <DeviceStateMachine+0xa8>)
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
				AutoPump_Control(PUMP_GPIO_PORT, PUMP_GPIO_PIN, GPIO_PIN_SET);
 8002240:	2201      	movs	r2, #1
 8002242:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002246:	4808      	ldr	r0, [pc, #32]	@ (8002268 <DeviceStateMachine+0xa4>)
 8002248:	f7ff fe6e 	bl	8001f28 <AutoPump_Control>
				Led_Control( LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_SET);
 800224c:	2201      	movs	r2, #1
 800224e:	2140      	movs	r1, #64	@ 0x40
 8002250:	4805      	ldr	r0, [pc, #20]	@ (8002268 <DeviceStateMachine+0xa4>)
 8002252:	f7ff fe2f 	bl	8001eb4 <Led_Control>
				currentPumpState = PUMP_RUNNING;
 8002256:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <DeviceStateMachine+0xac>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
			break;
 800225c:	e000      	b.n	8002260 <DeviceStateMachine+0x9c>
		default:
			break;
 800225e:	bf00      	nop
	}
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40020800 	.word	0x40020800
 800226c:	20000055 	.word	0x20000055
 8002270:	2000039c 	.word	0x2000039c
 8002274:	20000057 	.word	0x20000057
 8002278:	08001f85 	.word	0x08001f85
 800227c:	0800240c 	.word	0x0800240c

08002280 <processAutoRunPump>:

static void processAutoRunPump()
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
	if(autoRunPumpStatus == 1)
 8002286:	4b2c      	ldr	r3, [pc, #176]	@ (8002338 <processAutoRunPump+0xb8>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d04f      	beq.n	800232e <processAutoRunPump+0xae>
	{
		float currentHumidity = GetSoilHumidityPercent();
 800228e:	f7ff ff87 	bl	80021a0 <GetSoilHumidityPercent>
 8002292:	ed87 0a01 	vstr	s0, [r7, #4]
		    switch (currentPumpState)
 8002296:	4b29      	ldr	r3, [pc, #164]	@ (800233c <processAutoRunPump+0xbc>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <processAutoRunPump+0x26>
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d019      	beq.n	80022d8 <processAutoRunPump+0x58>
 80022a4:	e034      	b.n	8002310 <processAutoRunPump+0x90>
		    {
		        case PUMP_IDLE:
		            // Kiem tra lien tuc neu do am dat yeu cau thi tat bom
		            if (currentHumidity <= 5.0f)
 80022a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80022aa:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80022ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b6:	d900      	bls.n	80022ba <processAutoRunPump+0x3a>
		                AutoPump_Control(PUMP_GPIO_PORT, PUMP_GPIO_PIN, GPIO_PIN_SET);
		                Led_Control( LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_SET);
		                // Gan state sang PUMP_RUNNING
		                currentPumpState = PUMP_RUNNING;
		            }
		            break;
 80022b8:	e039      	b.n	800232e <processAutoRunPump+0xae>
		                AutoPump_Control(PUMP_GPIO_PORT, PUMP_GPIO_PIN, GPIO_PIN_SET);
 80022ba:	2201      	movs	r2, #1
 80022bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022c0:	481f      	ldr	r0, [pc, #124]	@ (8002340 <processAutoRunPump+0xc0>)
 80022c2:	f7ff fe31 	bl	8001f28 <AutoPump_Control>
		                Led_Control( LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_SET);
 80022c6:	2201      	movs	r2, #1
 80022c8:	2140      	movs	r1, #64	@ 0x40
 80022ca:	481d      	ldr	r0, [pc, #116]	@ (8002340 <processAutoRunPump+0xc0>)
 80022cc:	f7ff fdf2 	bl	8001eb4 <Led_Control>
		                currentPumpState = PUMP_RUNNING;
 80022d0:	4b1a      	ldr	r3, [pc, #104]	@ (800233c <processAutoRunPump+0xbc>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
		            break;
 80022d6:	e02a      	b.n	800232e <processAutoRunPump+0xae>

		        case PUMP_RUNNING:
		            // Trong khi bom dang chay kiem tra dieu kien do am
		            // Neu do am tren 30 thi tat bom
		            if (currentHumidity >= 10.0f)
 80022d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80022dc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80022e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e8:	da00      	bge.n	80022ec <processAutoRunPump+0x6c>
		                AutoPump_Control(PUMP_GPIO_PORT, PUMP_GPIO_PIN, GPIO_PIN_RESET);
		                Led_Control( LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_RESET);
		                checkPump = 0;
		                currentPumpState = PUMP_IDLE;
		            }
		            break;
 80022ea:	e020      	b.n	800232e <processAutoRunPump+0xae>
		                AutoPump_Control(PUMP_GPIO_PORT, PUMP_GPIO_PIN, GPIO_PIN_RESET);
 80022ec:	2200      	movs	r2, #0
 80022ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022f2:	4813      	ldr	r0, [pc, #76]	@ (8002340 <processAutoRunPump+0xc0>)
 80022f4:	f7ff fe18 	bl	8001f28 <AutoPump_Control>
		                Led_Control( LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_RESET);
 80022f8:	2200      	movs	r2, #0
 80022fa:	2140      	movs	r1, #64	@ 0x40
 80022fc:	4810      	ldr	r0, [pc, #64]	@ (8002340 <processAutoRunPump+0xc0>)
 80022fe:	f7ff fdd9 	bl	8001eb4 <Led_Control>
		                checkPump = 0;
 8002302:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <processAutoRunPump+0xc4>)
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
		                currentPumpState = PUMP_IDLE;
 8002308:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <processAutoRunPump+0xbc>)
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
		            break;
 800230e:	e00e      	b.n	800232e <processAutoRunPump+0xae>
		        default:
					// Trạng thái không xác định -> Chuyển về IDLE và tắt bơm
	 				currentPumpState = PUMP_IDLE;
 8002310:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <processAutoRunPump+0xbc>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
	 				AutoPump_Control(PUMP_GPIO_PORT, PUMP_GPIO_PIN, GPIO_PIN_RESET);
 8002316:	2200      	movs	r2, #0
 8002318:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800231c:	4808      	ldr	r0, [pc, #32]	@ (8002340 <processAutoRunPump+0xc0>)
 800231e:	f7ff fe03 	bl	8001f28 <AutoPump_Control>
	 				Led_Control( LED_GPIO_PORT, LED_GPIO_PIN, GPIO_PIN_RESET);
 8002322:	2200      	movs	r2, #0
 8002324:	2140      	movs	r1, #64	@ 0x40
 8002326:	4806      	ldr	r0, [pc, #24]	@ (8002340 <processAutoRunPump+0xc0>)
 8002328:	f7ff fdc4 	bl	8001eb4 <Led_Control>
	 				break;
 800232c:	bf00      	nop
		    }

    }
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000055 	.word	0x20000055
 800233c:	2000039c 	.word	0x2000039c
 8002340:	40020800 	.word	0x40020800
 8002344:	200003a4 	.word	0x200003a4

08002348 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002348:	480d      	ldr	r0, [pc, #52]	@ (8002380 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800234a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800234c:	f7fd ff42 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002350:	480c      	ldr	r0, [pc, #48]	@ (8002384 <LoopForever+0x6>)
  ldr r1, =_edata
 8002352:	490d      	ldr	r1, [pc, #52]	@ (8002388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002354:	4a0d      	ldr	r2, [pc, #52]	@ (800238c <LoopForever+0xe>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002358:	e002      	b.n	8002360 <LoopCopyDataInit>

0800235a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800235c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235e:	3304      	adds	r3, #4

08002360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002364:	d3f9      	bcc.n	800235a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002366:	4a0a      	ldr	r2, [pc, #40]	@ (8002390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002368:	4c0a      	ldr	r4, [pc, #40]	@ (8002394 <LoopForever+0x16>)
  movs r3, #0
 800236a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800236c:	e001      	b.n	8002372 <LoopFillZerobss>

0800236e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002370:	3204      	adds	r2, #4

08002372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002374:	d3fb      	bcc.n	800236e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002376:	f000 f811 	bl	800239c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800237a:	f7ff fce3 	bl	8001d44 <main>

0800237e <LoopForever>:

LoopForever:
  b LoopForever
 800237e:	e7fe      	b.n	800237e <LoopForever>
  ldr   r0, =_estack
 8002380:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002388:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 800238c:	08002420 	.word	0x08002420
  ldr r2, =_sbss
 8002390:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8002394:	200003a8 	.word	0x200003a8

08002398 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002398:	e7fe      	b.n	8002398 <ADC_IRQHandler>
	...

0800239c <__libc_init_array>:
 800239c:	b570      	push	{r4, r5, r6, lr}
 800239e:	4d0d      	ldr	r5, [pc, #52]	@ (80023d4 <__libc_init_array+0x38>)
 80023a0:	4c0d      	ldr	r4, [pc, #52]	@ (80023d8 <__libc_init_array+0x3c>)
 80023a2:	1b64      	subs	r4, r4, r5
 80023a4:	10a4      	asrs	r4, r4, #2
 80023a6:	2600      	movs	r6, #0
 80023a8:	42a6      	cmp	r6, r4
 80023aa:	d109      	bne.n	80023c0 <__libc_init_array+0x24>
 80023ac:	4d0b      	ldr	r5, [pc, #44]	@ (80023dc <__libc_init_array+0x40>)
 80023ae:	4c0c      	ldr	r4, [pc, #48]	@ (80023e0 <__libc_init_array+0x44>)
 80023b0:	f000 f818 	bl	80023e4 <_init>
 80023b4:	1b64      	subs	r4, r4, r5
 80023b6:	10a4      	asrs	r4, r4, #2
 80023b8:	2600      	movs	r6, #0
 80023ba:	42a6      	cmp	r6, r4
 80023bc:	d105      	bne.n	80023ca <__libc_init_array+0x2e>
 80023be:	bd70      	pop	{r4, r5, r6, pc}
 80023c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80023c4:	4798      	blx	r3
 80023c6:	3601      	adds	r6, #1
 80023c8:	e7ee      	b.n	80023a8 <__libc_init_array+0xc>
 80023ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ce:	4798      	blx	r3
 80023d0:	3601      	adds	r6, #1
 80023d2:	e7f2      	b.n	80023ba <__libc_init_array+0x1e>
 80023d4:	08002418 	.word	0x08002418
 80023d8:	08002418 	.word	0x08002418
 80023dc:	08002418 	.word	0x08002418
 80023e0:	0800241c 	.word	0x0800241c

080023e4 <_init>:
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023e6:	bf00      	nop
 80023e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ea:	bc08      	pop	{r3}
 80023ec:	469e      	mov	lr, r3
 80023ee:	4770      	bx	lr

080023f0 <_fini>:
 80023f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023f2:	bf00      	nop
 80023f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023f6:	bc08      	pop	{r3}
 80023f8:	469e      	mov	lr, r3
 80023fa:	4770      	bx	lr
